def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('app/key/key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterRoot = localProperties['flutter.sdk']
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties['flutter.versionCode']
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties['flutter.versionName']
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

ext.getKeystorePassword = {
    if (System.getenv('GIRAF_KEYSTORE_PASSWORD')) {
        return System.getenv('GIRAF_KEYSTORE_PASSWORD')
    }

    if (localProperties['giraf.keystore_password']) {
        return localProperties['giraf.keystore_password']
    }

    // Fallback. Avoid using
    if (keystoreProperties['keyPassword']) {
        return keystoreProperties['keyPassword']
    }

    return null // Silently fail to allow debug-mode without keysigning
}

android {
    compileSdkVersion 34

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "dk.aau.cs.giraf.weekplanner"
        minSdkVersion 31
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders['appAuthRedirectScheme'] = "dk.aau.cs.giraf";
        manifestPlaceholders['applicationName'] = "dk.aau.cs.giraf.weekplanner";
    }
    signingConfigs {
        release {
            def password = getKeystorePassword.call()

            storeFile file(keystoreProperties['storeFile'])
            keyAlias keystoreProperties['keyAlias']
            keyPassword password
            storePassword password
        }

        debug { }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
