/* 
 * The Giraf REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDepartmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId">Id of the department to add the resource to.</param>
        /// <param name="resourceId">Id of the resource to add to the department.</param>
        /// <returns>ResponseDepartmentDTO</returns>
        ResponseDepartmentDTO V1DepartmentByDepartmentIdResourceByResourceIdPost (long? departmentId, long? resourceId);

        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId">Id of the department to add the resource to.</param>
        /// <param name="resourceId">Id of the resource to add to the department.</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        ApiResponse<ResponseDepartmentDTO> V1DepartmentByDepartmentIdResourceByResourceIdPostWithHttpInfo (long? departmentId, long? resourceId);
        /// <summary>
        /// Add a user to the given department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId"></param>
        /// <param name="userId">The ID of a GirafUser to be added to the department.</param>
        /// <returns>ResponseDepartmentDTO</returns>
        ResponseDepartmentDTO V1DepartmentByDepartmentIdUserByUserIdPost (long? departmentId, string userId);

        /// <summary>
        /// Add a user to the given department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId"></param>
        /// <param name="userId">The ID of a GirafUser to be added to the department.</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        ApiResponse<ResponseDepartmentDTO> V1DepartmentByDepartmentIdUserByUserIdPostWithHttpInfo (long? departmentId, string userId);
        /// <summary>
        /// Gets the citizen names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Department ID.</param>
        /// <returns>ResponseListUserNameDTO</returns>
        ResponseListUserNameDTO V1DepartmentByIdCitizensGet (long? id);

        /// <summary>
        /// Gets the citizen names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Department ID.</param>
        /// <returns>ApiResponse of ResponseListUserNameDTO</returns>
        ApiResponse<ResponseListUserNameDTO> V1DepartmentByIdCitizensGetWithHttpInfo (long? id);
        /// <summary>
        /// Get the department with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to retrieve.</param>
        /// <returns>ResponseDepartmentDTO</returns>
        ResponseDepartmentDTO V1DepartmentByIdGet (long? id);

        /// <summary>
        /// Get the department with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to retrieve.</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        ApiResponse<ResponseDepartmentDTO> V1DepartmentByIdGetWithHttpInfo (long? id);
        /// <summary>
        /// Gets the department names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseListDepartmentNameDTO</returns>
        ResponseListDepartmentNameDTO V1DepartmentGet ();

        /// <summary>
        /// Gets the department names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseListDepartmentNameDTO</returns>
        ApiResponse<ResponseListDepartmentNameDTO> V1DepartmentGetWithHttpInfo ();
        /// <summary>
        /// Create a new department. it&#39;s only necesary to supply the departments name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depDTO">The department to add to the database. (optional)</param>
        /// <returns>ResponseDepartmentDTO</returns>
        ResponseDepartmentDTO V1DepartmentPost (DepartmentDTO depDTO = null);

        /// <summary>
        /// Create a new department. it&#39;s only necesary to supply the departments name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depDTO">The department to add to the database. (optional)</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        ApiResponse<ResponseDepartmentDTO> V1DepartmentPostWithHttpInfo (DepartmentDTO depDTO = null);
        /// <summary>
        /// Removes a resource from the users department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <returns>ResponseDepartmentDTO</returns>
        ResponseDepartmentDTO V1DepartmentResourceByResourceIdDelete (long? resourceId);

        /// <summary>
        /// Removes a resource from the users department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        ApiResponse<ResponseDepartmentDTO> V1DepartmentResourceByResourceIdDeleteWithHttpInfo (long? resourceId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId">Id of the department to add the resource to.</param>
        /// <param name="resourceId">Id of the resource to add to the department.</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentByDepartmentIdResourceByResourceIdPostAsync (long? departmentId, long? resourceId);

        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId">Id of the department to add the resource to.</param>
        /// <param name="resourceId">Id of the resource to add to the department.</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentByDepartmentIdResourceByResourceIdPostAsyncWithHttpInfo (long? departmentId, long? resourceId);
        /// <summary>
        /// Add a user to the given department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId"></param>
        /// <param name="userId">The ID of a GirafUser to be added to the department.</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentByDepartmentIdUserByUserIdPostAsync (long? departmentId, string userId);

        /// <summary>
        /// Add a user to the given department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId"></param>
        /// <param name="userId">The ID of a GirafUser to be added to the department.</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentByDepartmentIdUserByUserIdPostAsyncWithHttpInfo (long? departmentId, string userId);
        /// <summary>
        /// Gets the citizen names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Department ID.</param>
        /// <returns>Task of ResponseListUserNameDTO</returns>
        System.Threading.Tasks.Task<ResponseListUserNameDTO> V1DepartmentByIdCitizensGetAsync (long? id);

        /// <summary>
        /// Gets the citizen names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Department ID.</param>
        /// <returns>Task of ApiResponse (ResponseListUserNameDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseListUserNameDTO>> V1DepartmentByIdCitizensGetAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get the department with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to retrieve.</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentByIdGetAsync (long? id);

        /// <summary>
        /// Get the department with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to retrieve.</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentByIdGetAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Gets the department names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseListDepartmentNameDTO</returns>
        System.Threading.Tasks.Task<ResponseListDepartmentNameDTO> V1DepartmentGetAsync ();

        /// <summary>
        /// Gets the department names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseListDepartmentNameDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseListDepartmentNameDTO>> V1DepartmentGetAsyncWithHttpInfo ();
        /// <summary>
        /// Create a new department. it&#39;s only necesary to supply the departments name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depDTO">The department to add to the database. (optional)</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentPostAsync (DepartmentDTO depDTO = null);

        /// <summary>
        /// Create a new department. it&#39;s only necesary to supply the departments name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depDTO">The department to add to the database. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentPostAsyncWithHttpInfo (DepartmentDTO depDTO = null);
        /// <summary>
        /// Removes a resource from the users department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentResourceByResourceIdDeleteAsync (long? resourceId);

        /// <summary>
        /// Removes a resource from the users department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentResourceByResourceIdDeleteAsyncWithHttpInfo (long? resourceId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DepartmentApi : IDepartmentApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DepartmentApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DepartmentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId">Id of the department to add the resource to.</param>
        /// <param name="resourceId">Id of the resource to add to the department.</param>
        /// <returns>ResponseDepartmentDTO</returns>
        public ResponseDepartmentDTO V1DepartmentByDepartmentIdResourceByResourceIdPost (long? departmentId, long? resourceId)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = V1DepartmentByDepartmentIdResourceByResourceIdPostWithHttpInfo(departmentId, resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId">Id of the department to add the resource to.</param>
        /// <param name="resourceId">Id of the resource to add to the department.</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        public ApiResponse< ResponseDepartmentDTO > V1DepartmentByDepartmentIdResourceByResourceIdPostWithHttpInfo (long? departmentId, long? resourceId)
        {
            // verify the required parameter 'departmentId' is set
            if (departmentId == null)
                throw new ApiException(400, "Missing required parameter 'departmentId' when calling DepartmentApi->V1DepartmentByDepartmentIdResourceByResourceIdPost");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DepartmentApi->V1DepartmentByDepartmentIdResourceByResourceIdPost");

            var localVarPath = "/v1/Department/{departmentId}/resource/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (departmentId != null) localVarPathParams.Add("departmentId", Configuration.ApiClient.ParameterToString(departmentId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentByDepartmentIdResourceByResourceIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId">Id of the department to add the resource to.</param>
        /// <param name="resourceId">Id of the resource to add to the department.</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        public async System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentByDepartmentIdResourceByResourceIdPostAsync (long? departmentId, long? resourceId)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = await V1DepartmentByDepartmentIdResourceByResourceIdPostAsyncWithHttpInfo(departmentId, resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId">Id of the department to add the resource to.</param>
        /// <param name="resourceId">Id of the resource to add to the department.</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentByDepartmentIdResourceByResourceIdPostAsyncWithHttpInfo (long? departmentId, long? resourceId)
        {
            // verify the required parameter 'departmentId' is set
            if (departmentId == null)
                throw new ApiException(400, "Missing required parameter 'departmentId' when calling DepartmentApi->V1DepartmentByDepartmentIdResourceByResourceIdPost");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DepartmentApi->V1DepartmentByDepartmentIdResourceByResourceIdPost");

            var localVarPath = "/v1/Department/{departmentId}/resource/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (departmentId != null) localVarPathParams.Add("departmentId", Configuration.ApiClient.ParameterToString(departmentId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentByDepartmentIdResourceByResourceIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Add a user to the given department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId"></param>
        /// <param name="userId">The ID of a GirafUser to be added to the department.</param>
        /// <returns>ResponseDepartmentDTO</returns>
        public ResponseDepartmentDTO V1DepartmentByDepartmentIdUserByUserIdPost (long? departmentId, string userId)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = V1DepartmentByDepartmentIdUserByUserIdPostWithHttpInfo(departmentId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a user to the given department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId"></param>
        /// <param name="userId">The ID of a GirafUser to be added to the department.</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        public ApiResponse< ResponseDepartmentDTO > V1DepartmentByDepartmentIdUserByUserIdPostWithHttpInfo (long? departmentId, string userId)
        {
            // verify the required parameter 'departmentId' is set
            if (departmentId == null)
                throw new ApiException(400, "Missing required parameter 'departmentId' when calling DepartmentApi->V1DepartmentByDepartmentIdUserByUserIdPost");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling DepartmentApi->V1DepartmentByDepartmentIdUserByUserIdPost");

            var localVarPath = "/v1/Department/{departmentId}/user/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (departmentId != null) localVarPathParams.Add("departmentId", Configuration.ApiClient.ParameterToString(departmentId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentByDepartmentIdUserByUserIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Add a user to the given department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId"></param>
        /// <param name="userId">The ID of a GirafUser to be added to the department.</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        public async System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentByDepartmentIdUserByUserIdPostAsync (long? departmentId, string userId)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = await V1DepartmentByDepartmentIdUserByUserIdPostAsyncWithHttpInfo(departmentId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a user to the given department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentId"></param>
        /// <param name="userId">The ID of a GirafUser to be added to the department.</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentByDepartmentIdUserByUserIdPostAsyncWithHttpInfo (long? departmentId, string userId)
        {
            // verify the required parameter 'departmentId' is set
            if (departmentId == null)
                throw new ApiException(400, "Missing required parameter 'departmentId' when calling DepartmentApi->V1DepartmentByDepartmentIdUserByUserIdPost");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling DepartmentApi->V1DepartmentByDepartmentIdUserByUserIdPost");

            var localVarPath = "/v1/Department/{departmentId}/user/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (departmentId != null) localVarPathParams.Add("departmentId", Configuration.ApiClient.ParameterToString(departmentId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentByDepartmentIdUserByUserIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Gets the citizen names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Department ID.</param>
        /// <returns>ResponseListUserNameDTO</returns>
        public ResponseListUserNameDTO V1DepartmentByIdCitizensGet (long? id)
        {
             ApiResponse<ResponseListUserNameDTO> localVarResponse = V1DepartmentByIdCitizensGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the citizen names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Department ID.</param>
        /// <returns>ApiResponse of ResponseListUserNameDTO</returns>
        public ApiResponse< ResponseListUserNameDTO > V1DepartmentByIdCitizensGetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DepartmentApi->V1DepartmentByIdCitizensGet");

            var localVarPath = "/v1/Department/{id}/citizens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentByIdCitizensGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseListUserNameDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseListUserNameDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseListUserNameDTO)));
        }

        /// <summary>
        /// Gets the citizen names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Department ID.</param>
        /// <returns>Task of ResponseListUserNameDTO</returns>
        public async System.Threading.Tasks.Task<ResponseListUserNameDTO> V1DepartmentByIdCitizensGetAsync (long? id)
        {
             ApiResponse<ResponseListUserNameDTO> localVarResponse = await V1DepartmentByIdCitizensGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the citizen names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Department ID.</param>
        /// <returns>Task of ApiResponse (ResponseListUserNameDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseListUserNameDTO>> V1DepartmentByIdCitizensGetAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DepartmentApi->V1DepartmentByIdCitizensGet");

            var localVarPath = "/v1/Department/{id}/citizens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentByIdCitizensGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseListUserNameDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseListUserNameDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseListUserNameDTO)));
        }

        /// <summary>
        /// Get the department with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to retrieve.</param>
        /// <returns>ResponseDepartmentDTO</returns>
        public ResponseDepartmentDTO V1DepartmentByIdGet (long? id)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = V1DepartmentByIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the department with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to retrieve.</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        public ApiResponse< ResponseDepartmentDTO > V1DepartmentByIdGetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DepartmentApi->V1DepartmentByIdGet");

            var localVarPath = "/v1/Department/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Get the department with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to retrieve.</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        public async System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentByIdGetAsync (long? id)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = await V1DepartmentByIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the department with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to retrieve.</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentByIdGetAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DepartmentApi->V1DepartmentByIdGet");

            var localVarPath = "/v1/Department/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Gets the department names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseListDepartmentNameDTO</returns>
        public ResponseListDepartmentNameDTO V1DepartmentGet ()
        {
             ApiResponse<ResponseListDepartmentNameDTO> localVarResponse = V1DepartmentGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the department names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseListDepartmentNameDTO</returns>
        public ApiResponse< ResponseListDepartmentNameDTO > V1DepartmentGetWithHttpInfo ()
        {

            var localVarPath = "/v1/Department";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseListDepartmentNameDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseListDepartmentNameDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseListDepartmentNameDTO)));
        }

        /// <summary>
        /// Gets the department names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseListDepartmentNameDTO</returns>
        public async System.Threading.Tasks.Task<ResponseListDepartmentNameDTO> V1DepartmentGetAsync ()
        {
             ApiResponse<ResponseListDepartmentNameDTO> localVarResponse = await V1DepartmentGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the department names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseListDepartmentNameDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseListDepartmentNameDTO>> V1DepartmentGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/Department";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseListDepartmentNameDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseListDepartmentNameDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseListDepartmentNameDTO)));
        }

        /// <summary>
        /// Create a new department. it&#39;s only necesary to supply the departments name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depDTO">The department to add to the database. (optional)</param>
        /// <returns>ResponseDepartmentDTO</returns>
        public ResponseDepartmentDTO V1DepartmentPost (DepartmentDTO depDTO = null)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = V1DepartmentPostWithHttpInfo(depDTO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new department. it&#39;s only necesary to supply the departments name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depDTO">The department to add to the database. (optional)</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        public ApiResponse< ResponseDepartmentDTO > V1DepartmentPostWithHttpInfo (DepartmentDTO depDTO = null)
        {

            var localVarPath = "/v1/Department";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (depDTO != null && depDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(depDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = depDTO; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Create a new department. it&#39;s only necesary to supply the departments name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depDTO">The department to add to the database. (optional)</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        public async System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentPostAsync (DepartmentDTO depDTO = null)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = await V1DepartmentPostAsyncWithHttpInfo(depDTO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new department. it&#39;s only necesary to supply the departments name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="depDTO">The department to add to the database. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentPostAsyncWithHttpInfo (DepartmentDTO depDTO = null)
        {

            var localVarPath = "/v1/Department";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (depDTO != null && depDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(depDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = depDTO; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Removes a resource from the users department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <returns>ResponseDepartmentDTO</returns>
        public ResponseDepartmentDTO V1DepartmentResourceByResourceIdDelete (long? resourceId)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = V1DepartmentResourceByResourceIdDeleteWithHttpInfo(resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a resource from the users department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        public ApiResponse< ResponseDepartmentDTO > V1DepartmentResourceByResourceIdDeleteWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DepartmentApi->V1DepartmentResourceByResourceIdDelete");

            var localVarPath = "/v1/Department/resource/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentResourceByResourceIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Removes a resource from the users department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        public async System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentResourceByResourceIdDeleteAsync (long? resourceId)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = await V1DepartmentResourceByResourceIdDeleteAsyncWithHttpInfo(resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes a resource from the users department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId"></param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentResourceByResourceIdDeleteAsyncWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DepartmentApi->V1DepartmentResourceByResourceIdDelete");

            var localVarPath = "/v1/Department/resource/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentResourceByResourceIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

    }
}
