/* 
 * My API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UserApiTests
    {
        private UserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UserApi
            //Assert.IsInstanceOfType(typeof(UserApi), instance, "instance is a UserApi");
        }

        
        /// <summary>
        /// Test V1UserApplicationsByUsernameDelete
        /// </summary>
        [Test]
        public void V1UserApplicationsByUsernameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //ApplicationOption application = null;
            //var response = instance.V1UserApplicationsByUsernameDelete(username, application);
            //Assert.IsInstanceOf<ResponseGirafUserDTO> (response, "response is ResponseGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserApplicationsByUsernamePost
        /// </summary>
        [Test]
        public void V1UserApplicationsByUsernamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //ApplicationOption application = null;
            //var response = instance.V1UserApplicationsByUsernamePost(username, application);
            //Assert.IsInstanceOf<ResponseGirafUserDTO> (response, "response is ResponseGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserByIdIconGet
        /// </summary>
        [Test]
        public void V1UserByIdIconGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.V1UserByIdIconGet(id);
            //Assert.IsInstanceOf<ResponseImageDTO> (response, "response is ResponseImageDTO");
        }
        
        /// <summary>
        /// Test V1UserByIdIconRawGet
        /// </summary>
        [Test]
        public void V1UserByIdIconRawGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.V1UserByIdIconRawGet(id);
            
        }
        
        /// <summary>
        /// Test V1UserByUsernameGet
        /// </summary>
        [Test]
        public void V1UserByUsernameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.V1UserByUsernameGet(username);
            //Assert.IsInstanceOf<ResponseGirafUserDTO> (response, "response is ResponseGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserDisplayNamePut
        /// </summary>
        [Test]
        public void V1UserDisplayNamePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string displayName = null;
            //var response = instance.V1UserDisplayNamePut(displayName);
            //Assert.IsInstanceOf<ResponseGirafUserDTO> (response, "response is ResponseGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserGet
        /// </summary>
        [Test]
        public void V1UserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.V1UserGet();
            //Assert.IsInstanceOf<ResponseGirafUserDTO> (response, "response is ResponseGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserGetCitizensByUsernameGet
        /// </summary>
        [Test]
        public void V1UserGetCitizensByUsernameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.V1UserGetCitizensByUsernameGet(username);
            //Assert.IsInstanceOf<ResponseListGirafUserDTO> (response, "response is ResponseListGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserGetGuardiansByUsernameGet
        /// </summary>
        [Test]
        public void V1UserGetGuardiansByUsernameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.V1UserGetGuardiansByUsernameGet(username);
            //Assert.IsInstanceOf<ResponseListGirafUserDTO> (response, "response is ResponseListGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserGrayscaleByEnabledPost
        /// </summary>
        [Test]
        public void V1UserGrayscaleByEnabledPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? enabled = null;
            //var response = instance.V1UserGrayscaleByEnabledPost(enabled);
            //Assert.IsInstanceOf<ResponseGirafUserDTO> (response, "response is ResponseGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserIconDelete
        /// </summary>
        [Test]
        public void V1UserIconDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.V1UserIconDelete();
            //Assert.IsInstanceOf<ResponseGirafUserDTO> (response, "response is ResponseGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserIconPut
        /// </summary>
        [Test]
        public void V1UserIconPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.V1UserIconPut();
            //Assert.IsInstanceOf<ResponseGirafUserDTO> (response, "response is ResponseGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserLauncherAnimationsByEnabledPost
        /// </summary>
        [Test]
        public void V1UserLauncherAnimationsByEnabledPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? enabled = null;
            //var response = instance.V1UserLauncherAnimationsByEnabledPost(enabled);
            //Assert.IsInstanceOf<ResponseGirafUserDTO> (response, "response is ResponseGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserPut
        /// </summary>
        [Test]
        public void V1UserPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GirafUserDTO userDTO = null;
            //var response = instance.V1UserPut(userDTO);
            //Assert.IsInstanceOf<ResponseGirafUserDTO> (response, "response is ResponseGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserResourceByUsernamePost
        /// </summary>
        [Test]
        public void V1UserResourceByUsernamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //ResourceIdDTO resourceIdDTO = null;
            //var response = instance.V1UserResourceByUsernamePost(username, resourceIdDTO);
            //Assert.IsInstanceOf<ResponseGirafUserDTO> (response, "response is ResponseGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserResourceDelete
        /// </summary>
        [Test]
        public void V1UserResourceDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ResourceIdDTO resourceIdDTO = null;
            //var response = instance.V1UserResourceDelete(resourceIdDTO);
            //Assert.IsInstanceOf<ResponseGirafUserDTO> (response, "response is ResponseGirafUserDTO");
        }
        
        /// <summary>
        /// Test V1UserSettingsGet
        /// </summary>
        [Test]
        public void V1UserSettingsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.V1UserSettingsGet();
            //Assert.IsInstanceOf<ResponseLauncherOptionsDTO> (response, "response is ResponseLauncherOptionsDTO");
        }
        
        /// <summary>
        /// Test V1UserSettingsPut
        /// </summary>
        [Test]
        public void V1UserSettingsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LauncherOptionsDTO options = null;
            //var response = instance.V1UserSettingsPut(options);
            //Assert.IsInstanceOf<ResponseLauncherOptions> (response, "response is ResponseLauncherOptions");
        }
        
        /// <summary>
        /// Test V1UserUsernameGet
        /// </summary>
        [Test]
        public void V1UserUsernameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.V1UserUsernameGet();
            //Assert.IsInstanceOf<ResponseString> (response, "response is ResponseString");
        }
        
    }

}
