/* 
 * My API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing PictogramApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PictogramApiTests
    {
        private PictogramApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PictogramApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PictogramApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PictogramApi
            //Assert.IsInstanceOfType(typeof(PictogramApi), instance, "instance is a PictogramApi");
        }

        
        /// <summary>
        /// Test V1PictogramByIdDelete
        /// </summary>
        [Test]
        public void V1PictogramByIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.V1PictogramByIdDelete(id);
            //Assert.IsInstanceOf<Response> (response, "response is Response");
        }
        
        /// <summary>
        /// Test V1PictogramByIdGet
        /// </summary>
        [Test]
        public void V1PictogramByIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.V1PictogramByIdGet(id);
            //Assert.IsInstanceOf<ResponsePictogramDTO> (response, "response is ResponsePictogramDTO");
        }
        
        /// <summary>
        /// Test V1PictogramByIdImageGet
        /// </summary>
        [Test]
        public void V1PictogramByIdImageGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.V1PictogramByIdImageGet(id);
            //Assert.IsInstanceOf<ResponseByte> (response, "response is ResponseByte");
        }
        
        /// <summary>
        /// Test V1PictogramByIdImagePut
        /// </summary>
        [Test]
        public void V1PictogramByIdImagePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.V1PictogramByIdImagePut(id);
            //Assert.IsInstanceOf<ResponsePictogramDTO> (response, "response is ResponsePictogramDTO");
        }
        
        /// <summary>
        /// Test V1PictogramByIdImageRawGet
        /// </summary>
        [Test]
        public void V1PictogramByIdImageRawGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.V1PictogramByIdImageRawGet(id);
            
        }
        
        /// <summary>
        /// Test V1PictogramByIdPut
        /// </summary>
        [Test]
        public void V1PictogramByIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //PictogramDTO pictogram = null;
            //var response = instance.V1PictogramByIdPut(id, pictogram);
            //Assert.IsInstanceOf<ResponsePictogramDTO> (response, "response is ResponsePictogramDTO");
        }
        
        /// <summary>
        /// Test V1PictogramGet
        /// </summary>
        [Test]
        public void V1PictogramGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? p = null;
            //int? n = null;
            //string q = null;
            //var response = instance.V1PictogramGet(p, n, q);
            //Assert.IsInstanceOf<ResponseListPictogramDTO> (response, "response is ResponseListPictogramDTO");
        }
        
        /// <summary>
        /// Test V1PictogramPost
        /// </summary>
        [Test]
        public void V1PictogramPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PictogramDTO pictogram = null;
            //var response = instance.V1PictogramPost(pictogram);
            //Assert.IsInstanceOf<ResponsePictogramDTO> (response, "response is ResponsePictogramDTO");
        }
        
    }

}
