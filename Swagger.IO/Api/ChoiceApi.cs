/* 
 * My API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChoiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete the GirafRest.Models.Choice choice with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the choice to delete.</param>
        /// <returns>Response</returns>
        Response V1ChoiceByIdDelete (long? id);

        /// <summary>
        /// Delete the GirafRest.Models.Choice choice with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the choice to delete.</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> V1ChoiceByIdDeleteWithHttpInfo (long? id);
        /// <summary>
        /// Read the GirafRest.Models.Choice choice with the specified id ID and  check if the user is authorized to see it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResponseChoiceDTO</returns>
        ResponseChoiceDTO V1ChoiceByIdGet (long? id);

        /// <summary>
        /// Read the GirafRest.Models.Choice choice with the specified id ID and  check if the user is authorized to see it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResponseChoiceDTO</returns>
        ApiResponse<ResponseChoiceDTO> V1ChoiceByIdGetWithHttpInfo (long? id);
        /// <summary>
        /// Update info of a GirafRest.Models.Choice choice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all new information to update with.             The Id found in this DTO is the target choice. (optional)</param>
        /// <returns>ResponseChoiceDTO</returns>
        ResponseChoiceDTO V1ChoiceByIdPut (long? id, ChoiceDTO choice = null);

        /// <summary>
        /// Update info of a GirafRest.Models.Choice choice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all new information to update with.             The Id found in this DTO is the target choice. (optional)</param>
        /// <returns>ApiResponse of ResponseChoiceDTO</returns>
        ApiResponse<ResponseChoiceDTO> V1ChoiceByIdPutWithHttpInfo (long? id, ChoiceDTO choice = null);
        /// <summary>
        /// Create a new GirafRest.Models.Choice choice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all relevant information about the new cho�ce. (optional)</param>
        /// <returns>ResponseChoiceDTO</returns>
        ResponseChoiceDTO V1ChoicePost (ChoiceDTO choice = null);

        /// <summary>
        /// Create a new GirafRest.Models.Choice choice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all relevant information about the new cho�ce. (optional)</param>
        /// <returns>ApiResponse of ResponseChoiceDTO</returns>
        ApiResponse<ResponseChoiceDTO> V1ChoicePostWithHttpInfo (ChoiceDTO choice = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete the GirafRest.Models.Choice choice with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the choice to delete.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> V1ChoiceByIdDeleteAsync (long? id);

        /// <summary>
        /// Delete the GirafRest.Models.Choice choice with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the choice to delete.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> V1ChoiceByIdDeleteAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Read the GirafRest.Models.Choice choice with the specified id ID and  check if the user is authorized to see it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResponseChoiceDTO</returns>
        System.Threading.Tasks.Task<ResponseChoiceDTO> V1ChoiceByIdGetAsync (long? id);

        /// <summary>
        /// Read the GirafRest.Models.Choice choice with the specified id ID and  check if the user is authorized to see it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResponseChoiceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseChoiceDTO>> V1ChoiceByIdGetAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Update info of a GirafRest.Models.Choice choice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all new information to update with.             The Id found in this DTO is the target choice. (optional)</param>
        /// <returns>Task of ResponseChoiceDTO</returns>
        System.Threading.Tasks.Task<ResponseChoiceDTO> V1ChoiceByIdPutAsync (long? id, ChoiceDTO choice = null);

        /// <summary>
        /// Update info of a GirafRest.Models.Choice choice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all new information to update with.             The Id found in this DTO is the target choice. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChoiceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseChoiceDTO>> V1ChoiceByIdPutAsyncWithHttpInfo (long? id, ChoiceDTO choice = null);
        /// <summary>
        /// Create a new GirafRest.Models.Choice choice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all relevant information about the new cho�ce. (optional)</param>
        /// <returns>Task of ResponseChoiceDTO</returns>
        System.Threading.Tasks.Task<ResponseChoiceDTO> V1ChoicePostAsync (ChoiceDTO choice = null);

        /// <summary>
        /// Create a new GirafRest.Models.Choice choice.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all relevant information about the new cho�ce. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChoiceDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseChoiceDTO>> V1ChoicePostAsyncWithHttpInfo (ChoiceDTO choice = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChoiceApi : IChoiceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChoiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChoiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChoiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChoiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete the GirafRest.Models.Choice choice with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the choice to delete.</param>
        /// <returns>Response</returns>
        public Response V1ChoiceByIdDelete (long? id)
        {
             ApiResponse<Response> localVarResponse = V1ChoiceByIdDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the GirafRest.Models.Choice choice with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the choice to delete.</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > V1ChoiceByIdDeleteWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChoiceApi->V1ChoiceByIdDelete");

            var localVarPath = "/v1/Choice/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ChoiceByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
        }

        /// <summary>
        /// Delete the GirafRest.Models.Choice choice with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the choice to delete.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> V1ChoiceByIdDeleteAsync (long? id)
        {
             ApiResponse<Response> localVarResponse = await V1ChoiceByIdDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the GirafRest.Models.Choice choice with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the choice to delete.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> V1ChoiceByIdDeleteAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChoiceApi->V1ChoiceByIdDelete");

            var localVarPath = "/v1/Choice/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ChoiceByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
        }

        /// <summary>
        /// Read the GirafRest.Models.Choice choice with the specified id ID and  check if the user is authorized to see it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResponseChoiceDTO</returns>
        public ResponseChoiceDTO V1ChoiceByIdGet (long? id)
        {
             ApiResponse<ResponseChoiceDTO> localVarResponse = V1ChoiceByIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read the GirafRest.Models.Choice choice with the specified id ID and  check if the user is authorized to see it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResponseChoiceDTO</returns>
        public ApiResponse< ResponseChoiceDTO > V1ChoiceByIdGetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChoiceApi->V1ChoiceByIdGet");

            var localVarPath = "/v1/Choice/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ChoiceByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChoiceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChoiceDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChoiceDTO)));
        }

        /// <summary>
        /// Read the GirafRest.Models.Choice choice with the specified id ID and  check if the user is authorized to see it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResponseChoiceDTO</returns>
        public async System.Threading.Tasks.Task<ResponseChoiceDTO> V1ChoiceByIdGetAsync (long? id)
        {
             ApiResponse<ResponseChoiceDTO> localVarResponse = await V1ChoiceByIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read the GirafRest.Models.Choice choice with the specified id ID and  check if the user is authorized to see it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResponseChoiceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseChoiceDTO>> V1ChoiceByIdGetAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChoiceApi->V1ChoiceByIdGet");

            var localVarPath = "/v1/Choice/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ChoiceByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChoiceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChoiceDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChoiceDTO)));
        }

        /// <summary>
        /// Update info of a GirafRest.Models.Choice choice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all new information to update with.             The Id found in this DTO is the target choice. (optional)</param>
        /// <returns>ResponseChoiceDTO</returns>
        public ResponseChoiceDTO V1ChoiceByIdPut (long? id, ChoiceDTO choice = null)
        {
             ApiResponse<ResponseChoiceDTO> localVarResponse = V1ChoiceByIdPutWithHttpInfo(id, choice);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update info of a GirafRest.Models.Choice choice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all new information to update with.             The Id found in this DTO is the target choice. (optional)</param>
        /// <returns>ApiResponse of ResponseChoiceDTO</returns>
        public ApiResponse< ResponseChoiceDTO > V1ChoiceByIdPutWithHttpInfo (long? id, ChoiceDTO choice = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChoiceApi->V1ChoiceByIdPut");

            var localVarPath = "/v1/Choice/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (choice != null && choice.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(choice); // http body (model) parameter
            }
            else
            {
                localVarPostBody = choice; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ChoiceByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChoiceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChoiceDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChoiceDTO)));
        }

        /// <summary>
        /// Update info of a GirafRest.Models.Choice choice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all new information to update with.             The Id found in this DTO is the target choice. (optional)</param>
        /// <returns>Task of ResponseChoiceDTO</returns>
        public async System.Threading.Tasks.Task<ResponseChoiceDTO> V1ChoiceByIdPutAsync (long? id, ChoiceDTO choice = null)
        {
             ApiResponse<ResponseChoiceDTO> localVarResponse = await V1ChoiceByIdPutAsyncWithHttpInfo(id, choice);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update info of a GirafRest.Models.Choice choice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all new information to update with.             The Id found in this DTO is the target choice. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChoiceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseChoiceDTO>> V1ChoiceByIdPutAsyncWithHttpInfo (long? id, ChoiceDTO choice = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChoiceApi->V1ChoiceByIdPut");

            var localVarPath = "/v1/Choice/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (choice != null && choice.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(choice); // http body (model) parameter
            }
            else
            {
                localVarPostBody = choice; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ChoiceByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChoiceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChoiceDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChoiceDTO)));
        }

        /// <summary>
        /// Create a new GirafRest.Models.Choice choice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all relevant information about the new cho�ce. (optional)</param>
        /// <returns>ResponseChoiceDTO</returns>
        public ResponseChoiceDTO V1ChoicePost (ChoiceDTO choice = null)
        {
             ApiResponse<ResponseChoiceDTO> localVarResponse = V1ChoicePostWithHttpInfo(choice);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new GirafRest.Models.Choice choice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all relevant information about the new cho�ce. (optional)</param>
        /// <returns>ApiResponse of ResponseChoiceDTO</returns>
        public ApiResponse< ResponseChoiceDTO > V1ChoicePostWithHttpInfo (ChoiceDTO choice = null)
        {

            var localVarPath = "/v1/Choice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (choice != null && choice.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(choice); // http body (model) parameter
            }
            else
            {
                localVarPostBody = choice; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ChoicePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChoiceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChoiceDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChoiceDTO)));
        }

        /// <summary>
        /// Create a new GirafRest.Models.Choice choice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all relevant information about the new cho�ce. (optional)</param>
        /// <returns>Task of ResponseChoiceDTO</returns>
        public async System.Threading.Tasks.Task<ResponseChoiceDTO> V1ChoicePostAsync (ChoiceDTO choice = null)
        {
             ApiResponse<ResponseChoiceDTO> localVarResponse = await V1ChoicePostAsyncWithHttpInfo(choice);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new GirafRest.Models.Choice choice. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="choice">A GirafRest.Models.DTOs.ChoiceDTO with all relevant information about the new cho�ce. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChoiceDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseChoiceDTO>> V1ChoicePostAsyncWithHttpInfo (ChoiceDTO choice = null)
        {

            var localVarPath = "/v1/Choice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (choice != null && choice.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(choice); // http body (model) parameter
            }
            else
            {
                localVarPostBody = choice; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ChoicePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChoiceDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChoiceDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChoiceDTO)));
        }

    }
}
