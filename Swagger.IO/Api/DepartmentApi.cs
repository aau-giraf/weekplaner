/* 
 * My API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDepartmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the department with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to search for.</param>
        /// <returns>ResponseDepartmentDTO</returns>
        ResponseDepartmentDTO V1DepartmentByIdGet (long? id);

        /// <summary>
        /// Get the department with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to search for.</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        ApiResponse<ResponseDepartmentDTO> V1DepartmentByIdGetWithHttpInfo (long? id);
        /// <summary>
        /// Get all departments registered in the database or search for a department name as a query string.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseListDepartmentDTO</returns>
        ResponseListDepartmentDTO V1DepartmentGet ();

        /// <summary>
        /// Get all departments registered in the database or search for a department name as a query string.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseListDepartmentDTO</returns>
        ApiResponse<ResponseListDepartmentDTO> V1DepartmentGetWithHttpInfo ();
        /// <summary>
        /// Add a department to the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dep">The department to add to the database. (optional)</param>
        /// <returns>ResponseDepartmentDTO</returns>
        ResponseDepartmentDTO V1DepartmentPost (DepartmentDTO dep = null);

        /// <summary>
        /// Add a department to the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dep">The department to add to the database. (optional)</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        ApiResponse<ResponseDepartmentDTO> V1DepartmentPostWithHttpInfo (DepartmentDTO dep = null);
        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department to add the resource to.</param>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>ResponseDepartmentDTO</returns>
        ResponseDepartmentDTO V1DepartmentResourceByDepartmentIDPost (long? departmentID, ResourceIdDTO resourceDTO = null);

        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department to add the resource to.</param>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        ApiResponse<ResponseDepartmentDTO> V1DepartmentResourceByDepartmentIDPostWithHttpInfo (long? departmentID, ResourceIdDTO resourceDTO = null);
        /// <summary>
        /// Removes a resource from the users department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>ResponseDepartmentDTO</returns>
        ResponseDepartmentDTO V1DepartmentResourceDelete (ResourceIdDTO resourceDTO = null);

        /// <summary>
        /// Removes a resource from the users department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        ApiResponse<ResponseDepartmentDTO> V1DepartmentResourceDeleteWithHttpInfo (ResourceIdDTO resourceDTO = null);
        /// <summary>
        /// Removes a user from a given department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department from which the user should be removed</param>
        /// <param name="usr">A serialized instance of a GirafRest.Models.GirafUser user. (optional)</param>
        /// <returns>ResponseDepartmentDTO</returns>
        ResponseDepartmentDTO V1DepartmentUserByDepartmentIDDelete (long? departmentID, GirafUser usr = null);

        /// <summary>
        /// Removes a user from a given department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department from which the user should be removed</param>
        /// <param name="usr">A serialized instance of a GirafRest.Models.GirafUser user. (optional)</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        ApiResponse<ResponseDepartmentDTO> V1DepartmentUserByDepartmentIDDeleteWithHttpInfo (long? departmentID, GirafUser usr = null);
        /// <summary>
        /// Add a user to the given department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID"></param>
        /// <param name="usr">An existing GirafUser instance to be added to the department. (optional)</param>
        /// <returns>ResponseDepartmentDTO</returns>
        ResponseDepartmentDTO V1DepartmentUserByDepartmentIDPost (long? departmentID, GirafUserDTO usr = null);

        /// <summary>
        /// Add a user to the given department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID"></param>
        /// <param name="usr">An existing GirafUser instance to be added to the department. (optional)</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        ApiResponse<ResponseDepartmentDTO> V1DepartmentUserByDepartmentIDPostWithHttpInfo (long? departmentID, GirafUserDTO usr = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the department with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to search for.</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentByIdGetAsync (long? id);

        /// <summary>
        /// Get the department with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to search for.</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentByIdGetAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get all departments registered in the database or search for a department name as a query string.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseListDepartmentDTO</returns>
        System.Threading.Tasks.Task<ResponseListDepartmentDTO> V1DepartmentGetAsync ();

        /// <summary>
        /// Get all departments registered in the database or search for a department name as a query string.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseListDepartmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseListDepartmentDTO>> V1DepartmentGetAsyncWithHttpInfo ();
        /// <summary>
        /// Add a department to the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dep">The department to add to the database. (optional)</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentPostAsync (DepartmentDTO dep = null);

        /// <summary>
        /// Add a department to the database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dep">The department to add to the database. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentPostAsyncWithHttpInfo (DepartmentDTO dep = null);
        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department to add the resource to.</param>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentResourceByDepartmentIDPostAsync (long? departmentID, ResourceIdDTO resourceDTO = null);

        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department to add the resource to.</param>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentResourceByDepartmentIDPostAsyncWithHttpInfo (long? departmentID, ResourceIdDTO resourceDTO = null);
        /// <summary>
        /// Removes a resource from the users department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentResourceDeleteAsync (ResourceIdDTO resourceDTO = null);

        /// <summary>
        /// Removes a resource from the users department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentResourceDeleteAsyncWithHttpInfo (ResourceIdDTO resourceDTO = null);
        /// <summary>
        /// Removes a user from a given department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department from which the user should be removed</param>
        /// <param name="usr">A serialized instance of a GirafRest.Models.GirafUser user. (optional)</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentUserByDepartmentIDDeleteAsync (long? departmentID, GirafUser usr = null);

        /// <summary>
        /// Removes a user from a given department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department from which the user should be removed</param>
        /// <param name="usr">A serialized instance of a GirafRest.Models.GirafUser user. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentUserByDepartmentIDDeleteAsyncWithHttpInfo (long? departmentID, GirafUser usr = null);
        /// <summary>
        /// Add a user to the given department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID"></param>
        /// <param name="usr">An existing GirafUser instance to be added to the department. (optional)</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentUserByDepartmentIDPostAsync (long? departmentID, GirafUserDTO usr = null);

        /// <summary>
        /// Add a user to the given department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID"></param>
        /// <param name="usr">An existing GirafUser instance to be added to the department. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentUserByDepartmentIDPostAsyncWithHttpInfo (long? departmentID, GirafUserDTO usr = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DepartmentApi : IDepartmentApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DepartmentApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DepartmentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the department with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to search for.</param>
        /// <returns>ResponseDepartmentDTO</returns>
        public ResponseDepartmentDTO V1DepartmentByIdGet (long? id)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = V1DepartmentByIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the department with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to search for.</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        public ApiResponse< ResponseDepartmentDTO > V1DepartmentByIdGetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DepartmentApi->V1DepartmentByIdGet");

            var localVarPath = "/v1/Department/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Get the department with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to search for.</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        public async System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentByIdGetAsync (long? id)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = await V1DepartmentByIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the department with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to search for.</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentByIdGetAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DepartmentApi->V1DepartmentByIdGet");

            var localVarPath = "/v1/Department/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Get all departments registered in the database or search for a department name as a query string. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseListDepartmentDTO</returns>
        public ResponseListDepartmentDTO V1DepartmentGet ()
        {
             ApiResponse<ResponseListDepartmentDTO> localVarResponse = V1DepartmentGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all departments registered in the database or search for a department name as a query string. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseListDepartmentDTO</returns>
        public ApiResponse< ResponseListDepartmentDTO > V1DepartmentGetWithHttpInfo ()
        {

            var localVarPath = "/v1/Department";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseListDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseListDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseListDepartmentDTO)));
        }

        /// <summary>
        /// Get all departments registered in the database or search for a department name as a query string. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseListDepartmentDTO</returns>
        public async System.Threading.Tasks.Task<ResponseListDepartmentDTO> V1DepartmentGetAsync ()
        {
             ApiResponse<ResponseListDepartmentDTO> localVarResponse = await V1DepartmentGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all departments registered in the database or search for a department name as a query string. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseListDepartmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseListDepartmentDTO>> V1DepartmentGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/Department";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseListDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseListDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseListDepartmentDTO)));
        }

        /// <summary>
        /// Add a department to the database. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dep">The department to add to the database. (optional)</param>
        /// <returns>ResponseDepartmentDTO</returns>
        public ResponseDepartmentDTO V1DepartmentPost (DepartmentDTO dep = null)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = V1DepartmentPostWithHttpInfo(dep);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a department to the database. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dep">The department to add to the database. (optional)</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        public ApiResponse< ResponseDepartmentDTO > V1DepartmentPostWithHttpInfo (DepartmentDTO dep = null)
        {

            var localVarPath = "/v1/Department";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dep != null && dep.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dep); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dep; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Add a department to the database. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dep">The department to add to the database. (optional)</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        public async System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentPostAsync (DepartmentDTO dep = null)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = await V1DepartmentPostAsyncWithHttpInfo(dep);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a department to the database. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dep">The department to add to the database. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentPostAsyncWithHttpInfo (DepartmentDTO dep = null)
        {

            var localVarPath = "/v1/Department";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dep != null && dep.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dep); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dep; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department to add the resource to.</param>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>ResponseDepartmentDTO</returns>
        public ResponseDepartmentDTO V1DepartmentResourceByDepartmentIDPost (long? departmentID, ResourceIdDTO resourceDTO = null)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = V1DepartmentResourceByDepartmentIDPostWithHttpInfo(departmentID, resourceDTO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department to add the resource to.</param>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        public ApiResponse< ResponseDepartmentDTO > V1DepartmentResourceByDepartmentIDPostWithHttpInfo (long? departmentID, ResourceIdDTO resourceDTO = null)
        {
            // verify the required parameter 'departmentID' is set
            if (departmentID == null)
                throw new ApiException(400, "Missing required parameter 'departmentID' when calling DepartmentApi->V1DepartmentResourceByDepartmentIDPost");

            var localVarPath = "/v1/Department/resource/{departmentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (departmentID != null) localVarPathParams.Add("departmentID", Configuration.ApiClient.ParameterToString(departmentID)); // path parameter
            if (resourceDTO != null && resourceDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resourceDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resourceDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentResourceByDepartmentIDPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department to add the resource to.</param>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        public async System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentResourceByDepartmentIDPostAsync (long? departmentID, ResourceIdDTO resourceDTO = null)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = await V1DepartmentResourceByDepartmentIDPostAsyncWithHttpInfo(departmentID, resourceDTO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a resource to the given department. After this call, the department owns the resource and it is available to all its members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department to add the resource to.</param>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentResourceByDepartmentIDPostAsyncWithHttpInfo (long? departmentID, ResourceIdDTO resourceDTO = null)
        {
            // verify the required parameter 'departmentID' is set
            if (departmentID == null)
                throw new ApiException(400, "Missing required parameter 'departmentID' when calling DepartmentApi->V1DepartmentResourceByDepartmentIDPost");

            var localVarPath = "/v1/Department/resource/{departmentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (departmentID != null) localVarPathParams.Add("departmentID", Configuration.ApiClient.ParameterToString(departmentID)); // path parameter
            if (resourceDTO != null && resourceDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resourceDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resourceDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentResourceByDepartmentIDPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Removes a resource from the users department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>ResponseDepartmentDTO</returns>
        public ResponseDepartmentDTO V1DepartmentResourceDelete (ResourceIdDTO resourceDTO = null)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = V1DepartmentResourceDeleteWithHttpInfo(resourceDTO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a resource from the users department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        public ApiResponse< ResponseDepartmentDTO > V1DepartmentResourceDeleteWithHttpInfo (ResourceIdDTO resourceDTO = null)
        {

            var localVarPath = "/v1/Department/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceDTO != null && resourceDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resourceDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resourceDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentResourceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Removes a resource from the users department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        public async System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentResourceDeleteAsync (ResourceIdDTO resourceDTO = null)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = await V1DepartmentResourceDeleteAsyncWithHttpInfo(resourceDTO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes a resource from the users department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceDTO"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentResourceDeleteAsyncWithHttpInfo (ResourceIdDTO resourceDTO = null)
        {

            var localVarPath = "/v1/Department/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceDTO != null && resourceDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resourceDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resourceDTO; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentResourceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Removes a user from a given department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department from which the user should be removed</param>
        /// <param name="usr">A serialized instance of a GirafRest.Models.GirafUser user. (optional)</param>
        /// <returns>ResponseDepartmentDTO</returns>
        public ResponseDepartmentDTO V1DepartmentUserByDepartmentIDDelete (long? departmentID, GirafUser usr = null)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = V1DepartmentUserByDepartmentIDDeleteWithHttpInfo(departmentID, usr);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a user from a given department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department from which the user should be removed</param>
        /// <param name="usr">A serialized instance of a GirafRest.Models.GirafUser user. (optional)</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        public ApiResponse< ResponseDepartmentDTO > V1DepartmentUserByDepartmentIDDeleteWithHttpInfo (long? departmentID, GirafUser usr = null)
        {
            // verify the required parameter 'departmentID' is set
            if (departmentID == null)
                throw new ApiException(400, "Missing required parameter 'departmentID' when calling DepartmentApi->V1DepartmentUserByDepartmentIDDelete");

            var localVarPath = "/v1/Department/user/{departmentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (departmentID != null) localVarPathParams.Add("departmentID", Configuration.ApiClient.ParameterToString(departmentID)); // path parameter
            if (usr != null && usr.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(usr); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usr; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentUserByDepartmentIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Removes a user from a given department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department from which the user should be removed</param>
        /// <param name="usr">A serialized instance of a GirafRest.Models.GirafUser user. (optional)</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        public async System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentUserByDepartmentIDDeleteAsync (long? departmentID, GirafUser usr = null)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = await V1DepartmentUserByDepartmentIDDeleteAsyncWithHttpInfo(departmentID, usr);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes a user from a given department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID">Id of the department from which the user should be removed</param>
        /// <param name="usr">A serialized instance of a GirafRest.Models.GirafUser user. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentUserByDepartmentIDDeleteAsyncWithHttpInfo (long? departmentID, GirafUser usr = null)
        {
            // verify the required parameter 'departmentID' is set
            if (departmentID == null)
                throw new ApiException(400, "Missing required parameter 'departmentID' when calling DepartmentApi->V1DepartmentUserByDepartmentIDDelete");

            var localVarPath = "/v1/Department/user/{departmentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (departmentID != null) localVarPathParams.Add("departmentID", Configuration.ApiClient.ParameterToString(departmentID)); // path parameter
            if (usr != null && usr.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(usr); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usr; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentUserByDepartmentIDDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Add a user to the given department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID"></param>
        /// <param name="usr">An existing GirafUser instance to be added to the department. (optional)</param>
        /// <returns>ResponseDepartmentDTO</returns>
        public ResponseDepartmentDTO V1DepartmentUserByDepartmentIDPost (long? departmentID, GirafUserDTO usr = null)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = V1DepartmentUserByDepartmentIDPostWithHttpInfo(departmentID, usr);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a user to the given department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID"></param>
        /// <param name="usr">An existing GirafUser instance to be added to the department. (optional)</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        public ApiResponse< ResponseDepartmentDTO > V1DepartmentUserByDepartmentIDPostWithHttpInfo (long? departmentID, GirafUserDTO usr = null)
        {
            // verify the required parameter 'departmentID' is set
            if (departmentID == null)
                throw new ApiException(400, "Missing required parameter 'departmentID' when calling DepartmentApi->V1DepartmentUserByDepartmentIDPost");

            var localVarPath = "/v1/Department/user/{departmentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (departmentID != null) localVarPathParams.Add("departmentID", Configuration.ApiClient.ParameterToString(departmentID)); // path parameter
            if (usr != null && usr.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(usr); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usr; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentUserByDepartmentIDPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Add a user to the given department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID"></param>
        /// <param name="usr">An existing GirafUser instance to be added to the department. (optional)</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        public async System.Threading.Tasks.Task<ResponseDepartmentDTO> V1DepartmentUserByDepartmentIDPostAsync (long? departmentID, GirafUserDTO usr = null)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = await V1DepartmentUserByDepartmentIDPostAsyncWithHttpInfo(departmentID, usr);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a user to the given department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="departmentID"></param>
        /// <param name="usr">An existing GirafUser instance to be added to the department. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1DepartmentUserByDepartmentIDPostAsyncWithHttpInfo (long? departmentID, GirafUserDTO usr = null)
        {
            // verify the required parameter 'departmentID' is set
            if (departmentID == null)
                throw new ApiException(400, "Missing required parameter 'departmentID' when calling DepartmentApi->V1DepartmentUserByDepartmentIDPost");

            var localVarPath = "/v1/Department/user/{departmentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (departmentID != null) localVarPathParams.Add("departmentID", Configuration.ApiClient.ParameterToString(departmentID)); // path parameter
            if (usr != null && usr.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(usr); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usr; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1DepartmentUserByDepartmentIDPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

    }
}
