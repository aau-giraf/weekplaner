/* 
 * My API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPictogramApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete the GirafRest.Models.Pictogram pictogram with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to delete.</param>
        /// <returns>Response</returns>
        Response V1PictogramByIdDelete (int? id);

        /// <summary>
        /// Delete the GirafRest.Models.Pictogram pictogram with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to delete.</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> V1PictogramByIdDeleteWithHttpInfo (int? id);
        /// <summary>
        /// Read the GirafRest.Models.Pictogram pictogram with the specified id id and  check if the user is authorized to see it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to fetch.</param>
        /// <returns>ResponsePictogramDTO</returns>
        ResponsePictogramDTO V1PictogramByIdGet (long? id);

        /// <summary>
        /// Read the GirafRest.Models.Pictogram pictogram with the specified id id and  check if the user is authorized to see it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to fetch.</param>
        /// <returns>ApiResponse of ResponsePictogramDTO</returns>
        ApiResponse<ResponsePictogramDTO> V1PictogramByIdGetWithHttpInfo (long? id);
        /// <summary>
        /// Update info of a GirafRest.Models.Pictogram pictogram.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all new information to update with.              The Id found in this DTO is the target pictogram. (optional)</param>
        /// <returns>ResponsePictogramDTO</returns>
        ResponsePictogramDTO V1PictogramByIdPut (long? id, PictogramDTO pictogram = null);

        /// <summary>
        /// Update info of a GirafRest.Models.Pictogram pictogram.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all new information to update with.              The Id found in this DTO is the target pictogram. (optional)</param>
        /// <returns>ApiResponse of ResponsePictogramDTO</returns>
        ApiResponse<ResponsePictogramDTO> V1PictogramByIdPutWithHttpInfo (long? id, PictogramDTO pictogram = null);
        /// <summary>
        /// Get all public GirafRest.Models.Pictogram pictograms available to the user  (i.e the public pictograms and those owned by the user (PRIVATE) and his department (PROTECTED)).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseListPictogramDTO</returns>
        ResponseListPictogramDTO V1PictogramGet ();

        /// <summary>
        /// Get all public GirafRest.Models.Pictogram pictograms available to the user  (i.e the public pictograms and those owned by the user (PRIVATE) and his department (PROTECTED)).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseListPictogramDTO</returns>
        ApiResponse<ResponseListPictogramDTO> V1PictogramGetWithHttpInfo ();
        /// <summary>
        /// Read the image of a given pictogram.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to read the image of.</param>
        /// <returns>ResponseByte</returns>
        ResponseByte V1PictogramImageByIdGet (long? id);

        /// <summary>
        /// Read the image of a given pictogram.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to read the image of.</param>
        /// <returns>ApiResponse of ResponseByte</returns>
        ApiResponse<ResponseByte> V1PictogramImageByIdGetWithHttpInfo (long? id);
        /// <summary>
        /// Upload an image for the GirafRest.Models.Pictogram pictogram with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to upload an image for.</param>
        /// <returns>ResponsePictogramDTO</returns>
        ResponsePictogramDTO V1PictogramImageByIdPost (long? id);

        /// <summary>
        /// Upload an image for the GirafRest.Models.Pictogram pictogram with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to upload an image for.</param>
        /// <returns>ApiResponse of ResponsePictogramDTO</returns>
        ApiResponse<ResponsePictogramDTO> V1PictogramImageByIdPostWithHttpInfo (long? id);
        /// <summary>
        /// Update the image of a GirafRest.Models.Pictogram pictogram with the given Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to update the image for.</param>
        /// <returns>ResponsePictogramDTO</returns>
        ResponsePictogramDTO V1PictogramImageByIdPut (long? id);

        /// <summary>
        /// Update the image of a GirafRest.Models.Pictogram pictogram with the given Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to update the image for.</param>
        /// <returns>ApiResponse of ResponsePictogramDTO</returns>
        ApiResponse<ResponsePictogramDTO> V1PictogramImageByIdPutWithHttpInfo (long? id);
        /// <summary>
        /// Create a new GirafRest.Models.Pictogram pictogram.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all relevant information about the new pictogram. (optional)</param>
        /// <returns>ResponsePictogramDTO</returns>
        ResponsePictogramDTO V1PictogramPost (PictogramDTO pictogram = null);

        /// <summary>
        /// Create a new GirafRest.Models.Pictogram pictogram.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all relevant information about the new pictogram. (optional)</param>
        /// <returns>ApiResponse of ResponsePictogramDTO</returns>
        ApiResponse<ResponsePictogramDTO> V1PictogramPostWithHttpInfo (PictogramDTO pictogram = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete the GirafRest.Models.Pictogram pictogram with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to delete.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> V1PictogramByIdDeleteAsync (int? id);

        /// <summary>
        /// Delete the GirafRest.Models.Pictogram pictogram with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to delete.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> V1PictogramByIdDeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Read the GirafRest.Models.Pictogram pictogram with the specified id id and  check if the user is authorized to see it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to fetch.</param>
        /// <returns>Task of ResponsePictogramDTO</returns>
        System.Threading.Tasks.Task<ResponsePictogramDTO> V1PictogramByIdGetAsync (long? id);

        /// <summary>
        /// Read the GirafRest.Models.Pictogram pictogram with the specified id id and  check if the user is authorized to see it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to fetch.</param>
        /// <returns>Task of ApiResponse (ResponsePictogramDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsePictogramDTO>> V1PictogramByIdGetAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Update info of a GirafRest.Models.Pictogram pictogram.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all new information to update with.              The Id found in this DTO is the target pictogram. (optional)</param>
        /// <returns>Task of ResponsePictogramDTO</returns>
        System.Threading.Tasks.Task<ResponsePictogramDTO> V1PictogramByIdPutAsync (long? id, PictogramDTO pictogram = null);

        /// <summary>
        /// Update info of a GirafRest.Models.Pictogram pictogram.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all new information to update with.              The Id found in this DTO is the target pictogram. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePictogramDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsePictogramDTO>> V1PictogramByIdPutAsyncWithHttpInfo (long? id, PictogramDTO pictogram = null);
        /// <summary>
        /// Get all public GirafRest.Models.Pictogram pictograms available to the user  (i.e the public pictograms and those owned by the user (PRIVATE) and his department (PROTECTED)).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseListPictogramDTO</returns>
        System.Threading.Tasks.Task<ResponseListPictogramDTO> V1PictogramGetAsync ();

        /// <summary>
        /// Get all public GirafRest.Models.Pictogram pictograms available to the user  (i.e the public pictograms and those owned by the user (PRIVATE) and his department (PROTECTED)).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseListPictogramDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseListPictogramDTO>> V1PictogramGetAsyncWithHttpInfo ();
        /// <summary>
        /// Read the image of a given pictogram.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to read the image of.</param>
        /// <returns>Task of ResponseByte</returns>
        System.Threading.Tasks.Task<ResponseByte> V1PictogramImageByIdGetAsync (long? id);

        /// <summary>
        /// Read the image of a given pictogram.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to read the image of.</param>
        /// <returns>Task of ApiResponse (ResponseByte)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseByte>> V1PictogramImageByIdGetAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Upload an image for the GirafRest.Models.Pictogram pictogram with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to upload an image for.</param>
        /// <returns>Task of ResponsePictogramDTO</returns>
        System.Threading.Tasks.Task<ResponsePictogramDTO> V1PictogramImageByIdPostAsync (long? id);

        /// <summary>
        /// Upload an image for the GirafRest.Models.Pictogram pictogram with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to upload an image for.</param>
        /// <returns>Task of ApiResponse (ResponsePictogramDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsePictogramDTO>> V1PictogramImageByIdPostAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Update the image of a GirafRest.Models.Pictogram pictogram with the given Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to update the image for.</param>
        /// <returns>Task of ResponsePictogramDTO</returns>
        System.Threading.Tasks.Task<ResponsePictogramDTO> V1PictogramImageByIdPutAsync (long? id);

        /// <summary>
        /// Update the image of a GirafRest.Models.Pictogram pictogram with the given Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to update the image for.</param>
        /// <returns>Task of ApiResponse (ResponsePictogramDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsePictogramDTO>> V1PictogramImageByIdPutAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Create a new GirafRest.Models.Pictogram pictogram.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all relevant information about the new pictogram. (optional)</param>
        /// <returns>Task of ResponsePictogramDTO</returns>
        System.Threading.Tasks.Task<ResponsePictogramDTO> V1PictogramPostAsync (PictogramDTO pictogram = null);

        /// <summary>
        /// Create a new GirafRest.Models.Pictogram pictogram.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all relevant information about the new pictogram. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePictogramDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsePictogramDTO>> V1PictogramPostAsyncWithHttpInfo (PictogramDTO pictogram = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PictogramApi : IPictogramApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PictogramApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PictogramApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PictogramApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PictogramApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete the GirafRest.Models.Pictogram pictogram with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to delete.</param>
        /// <returns>Response</returns>
        public Response V1PictogramByIdDelete (int? id)
        {
             ApiResponse<Response> localVarResponse = V1PictogramByIdDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the GirafRest.Models.Pictogram pictogram with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to delete.</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > V1PictogramByIdDeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PictogramApi->V1PictogramByIdDelete");

            var localVarPath = "/v1/Pictogram/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
        }

        /// <summary>
        /// Delete the GirafRest.Models.Pictogram pictogram with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to delete.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> V1PictogramByIdDeleteAsync (int? id)
        {
             ApiResponse<Response> localVarResponse = await V1PictogramByIdDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the GirafRest.Models.Pictogram pictogram with the specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to delete.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> V1PictogramByIdDeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PictogramApi->V1PictogramByIdDelete");

            var localVarPath = "/v1/Pictogram/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
        }

        /// <summary>
        /// Read the GirafRest.Models.Pictogram pictogram with the specified id id and  check if the user is authorized to see it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to fetch.</param>
        /// <returns>ResponsePictogramDTO</returns>
        public ResponsePictogramDTO V1PictogramByIdGet (long? id)
        {
             ApiResponse<ResponsePictogramDTO> localVarResponse = V1PictogramByIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read the GirafRest.Models.Pictogram pictogram with the specified id id and  check if the user is authorized to see it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to fetch.</param>
        /// <returns>ApiResponse of ResponsePictogramDTO</returns>
        public ApiResponse< ResponsePictogramDTO > V1PictogramByIdGetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PictogramApi->V1PictogramByIdGet");

            var localVarPath = "/v1/Pictogram/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePictogramDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePictogramDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePictogramDTO)));
        }

        /// <summary>
        /// Read the GirafRest.Models.Pictogram pictogram with the specified id id and  check if the user is authorized to see it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to fetch.</param>
        /// <returns>Task of ResponsePictogramDTO</returns>
        public async System.Threading.Tasks.Task<ResponsePictogramDTO> V1PictogramByIdGetAsync (long? id)
        {
             ApiResponse<ResponsePictogramDTO> localVarResponse = await V1PictogramByIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read the GirafRest.Models.Pictogram pictogram with the specified id id and  check if the user is authorized to see it. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to fetch.</param>
        /// <returns>Task of ApiResponse (ResponsePictogramDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsePictogramDTO>> V1PictogramByIdGetAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PictogramApi->V1PictogramByIdGet");

            var localVarPath = "/v1/Pictogram/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePictogramDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePictogramDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePictogramDTO)));
        }

        /// <summary>
        /// Update info of a GirafRest.Models.Pictogram pictogram. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all new information to update with.              The Id found in this DTO is the target pictogram. (optional)</param>
        /// <returns>ResponsePictogramDTO</returns>
        public ResponsePictogramDTO V1PictogramByIdPut (long? id, PictogramDTO pictogram = null)
        {
             ApiResponse<ResponsePictogramDTO> localVarResponse = V1PictogramByIdPutWithHttpInfo(id, pictogram);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update info of a GirafRest.Models.Pictogram pictogram. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all new information to update with.              The Id found in this DTO is the target pictogram. (optional)</param>
        /// <returns>ApiResponse of ResponsePictogramDTO</returns>
        public ApiResponse< ResponsePictogramDTO > V1PictogramByIdPutWithHttpInfo (long? id, PictogramDTO pictogram = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PictogramApi->V1PictogramByIdPut");

            var localVarPath = "/v1/Pictogram/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (pictogram != null && pictogram.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pictogram); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pictogram; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePictogramDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePictogramDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePictogramDTO)));
        }

        /// <summary>
        /// Update info of a GirafRest.Models.Pictogram pictogram. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all new information to update with.              The Id found in this DTO is the target pictogram. (optional)</param>
        /// <returns>Task of ResponsePictogramDTO</returns>
        public async System.Threading.Tasks.Task<ResponsePictogramDTO> V1PictogramByIdPutAsync (long? id, PictogramDTO pictogram = null)
        {
             ApiResponse<ResponsePictogramDTO> localVarResponse = await V1PictogramByIdPutAsyncWithHttpInfo(id, pictogram);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update info of a GirafRest.Models.Pictogram pictogram. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all new information to update with.              The Id found in this DTO is the target pictogram. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePictogramDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsePictogramDTO>> V1PictogramByIdPutAsyncWithHttpInfo (long? id, PictogramDTO pictogram = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PictogramApi->V1PictogramByIdPut");

            var localVarPath = "/v1/Pictogram/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (pictogram != null && pictogram.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pictogram); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pictogram; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePictogramDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePictogramDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePictogramDTO)));
        }

        /// <summary>
        /// Get all public GirafRest.Models.Pictogram pictograms available to the user  (i.e the public pictograms and those owned by the user (PRIVATE) and his department (PROTECTED)). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseListPictogramDTO</returns>
        public ResponseListPictogramDTO V1PictogramGet ()
        {
             ApiResponse<ResponseListPictogramDTO> localVarResponse = V1PictogramGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all public GirafRest.Models.Pictogram pictograms available to the user  (i.e the public pictograms and those owned by the user (PRIVATE) and his department (PROTECTED)). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseListPictogramDTO</returns>
        public ApiResponse< ResponseListPictogramDTO > V1PictogramGetWithHttpInfo ()
        {

            var localVarPath = "/v1/Pictogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseListPictogramDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseListPictogramDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseListPictogramDTO)));
        }

        /// <summary>
        /// Get all public GirafRest.Models.Pictogram pictograms available to the user  (i.e the public pictograms and those owned by the user (PRIVATE) and his department (PROTECTED)). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseListPictogramDTO</returns>
        public async System.Threading.Tasks.Task<ResponseListPictogramDTO> V1PictogramGetAsync ()
        {
             ApiResponse<ResponseListPictogramDTO> localVarResponse = await V1PictogramGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all public GirafRest.Models.Pictogram pictograms available to the user  (i.e the public pictograms and those owned by the user (PRIVATE) and his department (PROTECTED)). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseListPictogramDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseListPictogramDTO>> V1PictogramGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/Pictogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseListPictogramDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseListPictogramDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseListPictogramDTO)));
        }

        /// <summary>
        /// Read the image of a given pictogram. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to read the image of.</param>
        /// <returns>ResponseByte</returns>
        public ResponseByte V1PictogramImageByIdGet (long? id)
        {
             ApiResponse<ResponseByte> localVarResponse = V1PictogramImageByIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read the image of a given pictogram. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to read the image of.</param>
        /// <returns>ApiResponse of ResponseByte</returns>
        public ApiResponse< ResponseByte > V1PictogramImageByIdGetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PictogramApi->V1PictogramImageByIdGet");

            var localVarPath = "/v1/Pictogram/image/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramImageByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseByte>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseByte) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseByte)));
        }

        /// <summary>
        /// Read the image of a given pictogram. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to read the image of.</param>
        /// <returns>Task of ResponseByte</returns>
        public async System.Threading.Tasks.Task<ResponseByte> V1PictogramImageByIdGetAsync (long? id)
        {
             ApiResponse<ResponseByte> localVarResponse = await V1PictogramImageByIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read the image of a given pictogram. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the pictogram to read the image of.</param>
        /// <returns>Task of ApiResponse (ResponseByte)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseByte>> V1PictogramImageByIdGetAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PictogramApi->V1PictogramImageByIdGet");

            var localVarPath = "/v1/Pictogram/image/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramImageByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseByte>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseByte) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseByte)));
        }

        /// <summary>
        /// Upload an image for the GirafRest.Models.Pictogram pictogram with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to upload an image for.</param>
        /// <returns>ResponsePictogramDTO</returns>
        public ResponsePictogramDTO V1PictogramImageByIdPost (long? id)
        {
             ApiResponse<ResponsePictogramDTO> localVarResponse = V1PictogramImageByIdPostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an image for the GirafRest.Models.Pictogram pictogram with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to upload an image for.</param>
        /// <returns>ApiResponse of ResponsePictogramDTO</returns>
        public ApiResponse< ResponsePictogramDTO > V1PictogramImageByIdPostWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PictogramApi->V1PictogramImageByIdPost");

            var localVarPath = "/v1/Pictogram/image/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramImageByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePictogramDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePictogramDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePictogramDTO)));
        }

        /// <summary>
        /// Upload an image for the GirafRest.Models.Pictogram pictogram with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to upload an image for.</param>
        /// <returns>Task of ResponsePictogramDTO</returns>
        public async System.Threading.Tasks.Task<ResponsePictogramDTO> V1PictogramImageByIdPostAsync (long? id)
        {
             ApiResponse<ResponsePictogramDTO> localVarResponse = await V1PictogramImageByIdPostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an image for the GirafRest.Models.Pictogram pictogram with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to upload an image for.</param>
        /// <returns>Task of ApiResponse (ResponsePictogramDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsePictogramDTO>> V1PictogramImageByIdPostAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PictogramApi->V1PictogramImageByIdPost");

            var localVarPath = "/v1/Pictogram/image/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramImageByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePictogramDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePictogramDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePictogramDTO)));
        }

        /// <summary>
        /// Update the image of a GirafRest.Models.Pictogram pictogram with the given Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to update the image for.</param>
        /// <returns>ResponsePictogramDTO</returns>
        public ResponsePictogramDTO V1PictogramImageByIdPut (long? id)
        {
             ApiResponse<ResponsePictogramDTO> localVarResponse = V1PictogramImageByIdPutWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the image of a GirafRest.Models.Pictogram pictogram with the given Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to update the image for.</param>
        /// <returns>ApiResponse of ResponsePictogramDTO</returns>
        public ApiResponse< ResponsePictogramDTO > V1PictogramImageByIdPutWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PictogramApi->V1PictogramImageByIdPut");

            var localVarPath = "/v1/Pictogram/image/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramImageByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePictogramDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePictogramDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePictogramDTO)));
        }

        /// <summary>
        /// Update the image of a GirafRest.Models.Pictogram pictogram with the given Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to update the image for.</param>
        /// <returns>Task of ResponsePictogramDTO</returns>
        public async System.Threading.Tasks.Task<ResponsePictogramDTO> V1PictogramImageByIdPutAsync (long? id)
        {
             ApiResponse<ResponsePictogramDTO> localVarResponse = await V1PictogramImageByIdPutAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the image of a GirafRest.Models.Pictogram pictogram with the given Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the pictogram to update the image for.</param>
        /// <returns>Task of ApiResponse (ResponsePictogramDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsePictogramDTO>> V1PictogramImageByIdPutAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PictogramApi->V1PictogramImageByIdPut");

            var localVarPath = "/v1/Pictogram/image/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramImageByIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePictogramDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePictogramDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePictogramDTO)));
        }

        /// <summary>
        /// Create a new GirafRest.Models.Pictogram pictogram. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all relevant information about the new pictogram. (optional)</param>
        /// <returns>ResponsePictogramDTO</returns>
        public ResponsePictogramDTO V1PictogramPost (PictogramDTO pictogram = null)
        {
             ApiResponse<ResponsePictogramDTO> localVarResponse = V1PictogramPostWithHttpInfo(pictogram);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new GirafRest.Models.Pictogram pictogram. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all relevant information about the new pictogram. (optional)</param>
        /// <returns>ApiResponse of ResponsePictogramDTO</returns>
        public ApiResponse< ResponsePictogramDTO > V1PictogramPostWithHttpInfo (PictogramDTO pictogram = null)
        {

            var localVarPath = "/v1/Pictogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pictogram != null && pictogram.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pictogram); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pictogram; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePictogramDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePictogramDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePictogramDTO)));
        }

        /// <summary>
        /// Create a new GirafRest.Models.Pictogram pictogram. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all relevant information about the new pictogram. (optional)</param>
        /// <returns>Task of ResponsePictogramDTO</returns>
        public async System.Threading.Tasks.Task<ResponsePictogramDTO> V1PictogramPostAsync (PictogramDTO pictogram = null)
        {
             ApiResponse<ResponsePictogramDTO> localVarResponse = await V1PictogramPostAsyncWithHttpInfo(pictogram);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new GirafRest.Models.Pictogram pictogram. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictogram">A GirafRest.Models.DTOs.PictogramDTO with all relevant information about the new pictogram. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePictogramDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsePictogramDTO>> V1PictogramPostAsyncWithHttpInfo (PictogramDTO pictogram = null)
        {

            var localVarPath = "/v1/Pictogram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pictogram != null && pictogram.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pictogram); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pictogram; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PictogramPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePictogramDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePictogramDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePictogramDTO)));
        }

    }
}
