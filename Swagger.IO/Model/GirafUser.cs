/* 
 * My API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GirafUser defines all relavant data for the user&#39;s of Giraf.
    /// </summary>
    [DataContract]
    public partial class GirafUser :  IEquatable<GirafUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GirafUser" /> class.
        /// </summary>
        /// <param name="IsDepartment">Whether or not the current user is a DepartmentUser.</param>
        /// <param name="GuardianOf">List of users the user is guardian of. Is simply null if the user isn&#39;t a guardian.</param>
        /// <param name="DisplayName">The display name for the user..</param>
        /// <param name="UserIcon">The profile icon of the user..</param>
        /// <param name="DepartmentKey">The key of the user&#39;s department..</param>
        /// <param name="Department">A reference to the user&#39;s department..</param>
        /// <param name="WeekSchedule">A collection of the user&#39;s week schedules..</param>
        /// <param name="Resources">A collection of the user&#39;s resources..</param>
        /// <param name="Settings">A field for storing all relevant options that the user has specified in the GirafLauncher..</param>
        /// <param name="Id">Id.</param>
        /// <param name="UserName">UserName.</param>
        /// <param name="NormalizedUserName">NormalizedUserName.</param>
        /// <param name="Email">Email.</param>
        /// <param name="NormalizedEmail">NormalizedEmail.</param>
        /// <param name="EmailConfirmed">EmailConfirmed.</param>
        /// <param name="PasswordHash">PasswordHash.</param>
        /// <param name="SecurityStamp">SecurityStamp.</param>
        /// <param name="ConcurrencyStamp">ConcurrencyStamp.</param>
        /// <param name="PhoneNumber">PhoneNumber.</param>
        /// <param name="PhoneNumberConfirmed">PhoneNumberConfirmed.</param>
        /// <param name="TwoFactorEnabled">TwoFactorEnabled.</param>
        /// <param name="LockoutEnd">LockoutEnd.</param>
        /// <param name="LockoutEnabled">LockoutEnabled.</param>
        /// <param name="AccessFailedCount">AccessFailedCount.</param>
        public GirafUser(bool? IsDepartment = default(bool?), List<GirafUser> GuardianOf = default(List<GirafUser>), string DisplayName = default(string), byte[] UserIcon = default(byte[]), long? DepartmentKey = default(long?), Department Department = default(Department), List<Week> WeekSchedule = default(List<Week>), List<UserResource> Resources = default(List<UserResource>), LauncherOptions Settings = default(LauncherOptions), string Id = default(string), string UserName = default(string), string NormalizedUserName = default(string), string Email = default(string), string NormalizedEmail = default(string), bool? EmailConfirmed = default(bool?), string PasswordHash = default(string), string SecurityStamp = default(string), string ConcurrencyStamp = default(string), string PhoneNumber = default(string), bool? PhoneNumberConfirmed = default(bool?), bool? TwoFactorEnabled = default(bool?), DateTime? LockoutEnd = default(DateTime?), bool? LockoutEnabled = default(bool?), int? AccessFailedCount = default(int?))
        {
            this.IsDepartment = IsDepartment;
            this.GuardianOf = GuardianOf;
            this.DisplayName = DisplayName;
            this.UserIcon = UserIcon;
            this.DepartmentKey = DepartmentKey;
            this.Department = Department;
            this.WeekSchedule = WeekSchedule;
            this.Resources = Resources;
            this.Settings = Settings;
            this.Id = Id;
            this.UserName = UserName;
            this.NormalizedUserName = NormalizedUserName;
            this.Email = Email;
            this.NormalizedEmail = NormalizedEmail;
            this.EmailConfirmed = EmailConfirmed;
            this.PasswordHash = PasswordHash;
            this.SecurityStamp = SecurityStamp;
            this.ConcurrencyStamp = ConcurrencyStamp;
            this.PhoneNumber = PhoneNumber;
            this.PhoneNumberConfirmed = PhoneNumberConfirmed;
            this.TwoFactorEnabled = TwoFactorEnabled;
            this.LockoutEnd = LockoutEnd;
            this.LockoutEnabled = LockoutEnabled;
            this.AccessFailedCount = AccessFailedCount;
        }
        
        /// <summary>
        /// Whether or not the current user is a DepartmentUser
        /// </summary>
        /// <value>Whether or not the current user is a DepartmentUser</value>
        [DataMember(Name="isDepartment", EmitDefaultValue=false)]
        public bool? IsDepartment { get; set; }

        /// <summary>
        /// List of users the user is guardian of. Is simply null if the user isn&#39;t a guardian
        /// </summary>
        /// <value>List of users the user is guardian of. Is simply null if the user isn&#39;t a guardian</value>
        [DataMember(Name="guardianOf", EmitDefaultValue=false)]
        public List<GirafUser> GuardianOf { get; set; }

        /// <summary>
        /// The display name for the user.
        /// </summary>
        /// <value>The display name for the user.</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The profile icon of the user.
        /// </summary>
        /// <value>The profile icon of the user.</value>
        [DataMember(Name="userIcon", EmitDefaultValue=false)]
        public byte[] UserIcon { get; set; }

        /// <summary>
        /// The key of the user&#39;s department.
        /// </summary>
        /// <value>The key of the user&#39;s department.</value>
        [DataMember(Name="departmentKey", EmitDefaultValue=false)]
        public long? DepartmentKey { get; set; }

        /// <summary>
        /// A reference to the user&#39;s department.
        /// </summary>
        /// <value>A reference to the user&#39;s department.</value>
        [DataMember(Name="department", EmitDefaultValue=false)]
        public Department Department { get; set; }

        /// <summary>
        /// A collection of the user&#39;s week schedules.
        /// </summary>
        /// <value>A collection of the user&#39;s week schedules.</value>
        [DataMember(Name="weekSchedule", EmitDefaultValue=false)]
        public List<Week> WeekSchedule { get; set; }

        /// <summary>
        /// A collection of the user&#39;s resources.
        /// </summary>
        /// <value>A collection of the user&#39;s resources.</value>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<UserResource> Resources { get; set; }

        /// <summary>
        /// A field for storing all relevant options that the user has specified in the GirafLauncher.
        /// </summary>
        /// <value>A field for storing all relevant options that the user has specified in the GirafLauncher.</value>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public LauncherOptions Settings { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets NormalizedUserName
        /// </summary>
        [DataMember(Name="normalizedUserName", EmitDefaultValue=false)]
        public string NormalizedUserName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets NormalizedEmail
        /// </summary>
        [DataMember(Name="normalizedEmail", EmitDefaultValue=false)]
        public string NormalizedEmail { get; set; }

        /// <summary>
        /// Gets or Sets EmailConfirmed
        /// </summary>
        [DataMember(Name="emailConfirmed", EmitDefaultValue=false)]
        public bool? EmailConfirmed { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHash
        /// </summary>
        [DataMember(Name="passwordHash", EmitDefaultValue=false)]
        public string PasswordHash { get; set; }

        /// <summary>
        /// Gets or Sets SecurityStamp
        /// </summary>
        [DataMember(Name="securityStamp", EmitDefaultValue=false)]
        public string SecurityStamp { get; set; }

        /// <summary>
        /// Gets or Sets ConcurrencyStamp
        /// </summary>
        [DataMember(Name="concurrencyStamp", EmitDefaultValue=false)]
        public string ConcurrencyStamp { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumberConfirmed
        /// </summary>
        [DataMember(Name="phoneNumberConfirmed", EmitDefaultValue=false)]
        public bool? PhoneNumberConfirmed { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorEnabled
        /// </summary>
        [DataMember(Name="twoFactorEnabled", EmitDefaultValue=false)]
        public bool? TwoFactorEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LockoutEnd
        /// </summary>
        [DataMember(Name="lockoutEnd", EmitDefaultValue=false)]
        public DateTime? LockoutEnd { get; set; }

        /// <summary>
        /// Gets or Sets LockoutEnabled
        /// </summary>
        [DataMember(Name="lockoutEnabled", EmitDefaultValue=false)]
        public bool? LockoutEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AccessFailedCount
        /// </summary>
        [DataMember(Name="accessFailedCount", EmitDefaultValue=false)]
        public int? AccessFailedCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GirafUser {\n");
            sb.Append("  IsDepartment: ").Append(IsDepartment).Append("\n");
            sb.Append("  GuardianOf: ").Append(GuardianOf).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  UserIcon: ").Append(UserIcon).Append("\n");
            sb.Append("  DepartmentKey: ").Append(DepartmentKey).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  WeekSchedule: ").Append(WeekSchedule).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  NormalizedUserName: ").Append(NormalizedUserName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  NormalizedEmail: ").Append(NormalizedEmail).Append("\n");
            sb.Append("  EmailConfirmed: ").Append(EmailConfirmed).Append("\n");
            sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
            sb.Append("  SecurityStamp: ").Append(SecurityStamp).Append("\n");
            sb.Append("  ConcurrencyStamp: ").Append(ConcurrencyStamp).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneNumberConfirmed: ").Append(PhoneNumberConfirmed).Append("\n");
            sb.Append("  TwoFactorEnabled: ").Append(TwoFactorEnabled).Append("\n");
            sb.Append("  LockoutEnd: ").Append(LockoutEnd).Append("\n");
            sb.Append("  LockoutEnabled: ").Append(LockoutEnabled).Append("\n");
            sb.Append("  AccessFailedCount: ").Append(AccessFailedCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GirafUser);
        }

        /// <summary>
        /// Returns true if GirafUser instances are equal
        /// </summary>
        /// <param name="other">Instance of GirafUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GirafUser other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IsDepartment == other.IsDepartment ||
                    this.IsDepartment != null &&
                    this.IsDepartment.Equals(other.IsDepartment)
                ) && 
                (
                    this.GuardianOf == other.GuardianOf ||
                    this.GuardianOf != null &&
                    this.GuardianOf.SequenceEqual(other.GuardianOf)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.UserIcon == other.UserIcon ||
                    this.UserIcon != null &&
                    this.UserIcon.Equals(other.UserIcon)
                ) && 
                (
                    this.DepartmentKey == other.DepartmentKey ||
                    this.DepartmentKey != null &&
                    this.DepartmentKey.Equals(other.DepartmentKey)
                ) && 
                (
                    this.Department == other.Department ||
                    this.Department != null &&
                    this.Department.Equals(other.Department)
                ) && 
                (
                    this.WeekSchedule == other.WeekSchedule ||
                    this.WeekSchedule != null &&
                    this.WeekSchedule.SequenceEqual(other.WeekSchedule)
                ) && 
                (
                    this.Resources == other.Resources ||
                    this.Resources != null &&
                    this.Resources.SequenceEqual(other.Resources)
                ) && 
                (
                    this.Settings == other.Settings ||
                    this.Settings != null &&
                    this.Settings.Equals(other.Settings)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                ) && 
                (
                    this.NormalizedUserName == other.NormalizedUserName ||
                    this.NormalizedUserName != null &&
                    this.NormalizedUserName.Equals(other.NormalizedUserName)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.NormalizedEmail == other.NormalizedEmail ||
                    this.NormalizedEmail != null &&
                    this.NormalizedEmail.Equals(other.NormalizedEmail)
                ) && 
                (
                    this.EmailConfirmed == other.EmailConfirmed ||
                    this.EmailConfirmed != null &&
                    this.EmailConfirmed.Equals(other.EmailConfirmed)
                ) && 
                (
                    this.PasswordHash == other.PasswordHash ||
                    this.PasswordHash != null &&
                    this.PasswordHash.Equals(other.PasswordHash)
                ) && 
                (
                    this.SecurityStamp == other.SecurityStamp ||
                    this.SecurityStamp != null &&
                    this.SecurityStamp.Equals(other.SecurityStamp)
                ) && 
                (
                    this.ConcurrencyStamp == other.ConcurrencyStamp ||
                    this.ConcurrencyStamp != null &&
                    this.ConcurrencyStamp.Equals(other.ConcurrencyStamp)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.PhoneNumberConfirmed == other.PhoneNumberConfirmed ||
                    this.PhoneNumberConfirmed != null &&
                    this.PhoneNumberConfirmed.Equals(other.PhoneNumberConfirmed)
                ) && 
                (
                    this.TwoFactorEnabled == other.TwoFactorEnabled ||
                    this.TwoFactorEnabled != null &&
                    this.TwoFactorEnabled.Equals(other.TwoFactorEnabled)
                ) && 
                (
                    this.LockoutEnd == other.LockoutEnd ||
                    this.LockoutEnd != null &&
                    this.LockoutEnd.Equals(other.LockoutEnd)
                ) && 
                (
                    this.LockoutEnabled == other.LockoutEnabled ||
                    this.LockoutEnabled != null &&
                    this.LockoutEnabled.Equals(other.LockoutEnabled)
                ) && 
                (
                    this.AccessFailedCount == other.AccessFailedCount ||
                    this.AccessFailedCount != null &&
                    this.AccessFailedCount.Equals(other.AccessFailedCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IsDepartment != null)
                    hash = hash * 59 + this.IsDepartment.GetHashCode();
                if (this.GuardianOf != null)
                    hash = hash * 59 + this.GuardianOf.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.UserIcon != null)
                    hash = hash * 59 + this.UserIcon.GetHashCode();
                if (this.DepartmentKey != null)
                    hash = hash * 59 + this.DepartmentKey.GetHashCode();
                if (this.Department != null)
                    hash = hash * 59 + this.Department.GetHashCode();
                if (this.WeekSchedule != null)
                    hash = hash * 59 + this.WeekSchedule.GetHashCode();
                if (this.Resources != null)
                    hash = hash * 59 + this.Resources.GetHashCode();
                if (this.Settings != null)
                    hash = hash * 59 + this.Settings.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                if (this.NormalizedUserName != null)
                    hash = hash * 59 + this.NormalizedUserName.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.NormalizedEmail != null)
                    hash = hash * 59 + this.NormalizedEmail.GetHashCode();
                if (this.EmailConfirmed != null)
                    hash = hash * 59 + this.EmailConfirmed.GetHashCode();
                if (this.PasswordHash != null)
                    hash = hash * 59 + this.PasswordHash.GetHashCode();
                if (this.SecurityStamp != null)
                    hash = hash * 59 + this.SecurityStamp.GetHashCode();
                if (this.ConcurrencyStamp != null)
                    hash = hash * 59 + this.ConcurrencyStamp.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.PhoneNumberConfirmed != null)
                    hash = hash * 59 + this.PhoneNumberConfirmed.GetHashCode();
                if (this.TwoFactorEnabled != null)
                    hash = hash * 59 + this.TwoFactorEnabled.GetHashCode();
                if (this.LockoutEnd != null)
                    hash = hash * 59 + this.LockoutEnd.GetHashCode();
                if (this.LockoutEnabled != null)
                    hash = hash * 59 + this.LockoutEnabled.GetHashCode();
                if (this.AccessFailedCount != null)
                    hash = hash * 59 + this.AccessFailedCount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
