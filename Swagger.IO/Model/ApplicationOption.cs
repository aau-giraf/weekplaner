/* 
 * My API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Used to indicate that the user is allowed to use a given application.
    /// </summary>
    [DataContract]
    public partial class ApplicationOption :  IEquatable<ApplicationOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicationOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationOption" /> class.
        /// </summary>
        /// <param name="Id">The id of the ApplicationOption entity..</param>
        /// <param name="ApplicationName">The name of the application that the user is allowed to use. (required).</param>
        /// <param name="ApplicationPackage">The package in which the given application is located. (required).</param>
        public ApplicationOption(long? Id = default(long?), string ApplicationName = default(string), string ApplicationPackage = default(string))
        {
            // to ensure "ApplicationName" is required (not null)
            if (ApplicationName == null)
            {
                throw new InvalidDataException("ApplicationName is a required property for ApplicationOption and cannot be null");
            }
            else
            {
                this.ApplicationName = ApplicationName;
            }
            // to ensure "ApplicationPackage" is required (not null)
            if (ApplicationPackage == null)
            {
                throw new InvalidDataException("ApplicationPackage is a required property for ApplicationOption and cannot be null");
            }
            else
            {
                this.ApplicationPackage = ApplicationPackage;
            }
            this.Id = Id;
        }
        
        /// <summary>
        /// The id of the ApplicationOption entity.
        /// </summary>
        /// <value>The id of the ApplicationOption entity.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The name of the application that the user is allowed to use.
        /// </summary>
        /// <value>The name of the application that the user is allowed to use.</value>
        [DataMember(Name="applicationName", EmitDefaultValue=false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// The package in which the given application is located.
        /// </summary>
        /// <value>The package in which the given application is located.</value>
        [DataMember(Name="applicationPackage", EmitDefaultValue=false)]
        public string ApplicationPackage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationOption {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  ApplicationPackage: ").Append(ApplicationPackage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ApplicationOption);
        }

        /// <summary>
        /// Returns true if ApplicationOption instances are equal
        /// </summary>
        /// <param name="other">Instance of ApplicationOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationOption other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ApplicationName == other.ApplicationName ||
                    this.ApplicationName != null &&
                    this.ApplicationName.Equals(other.ApplicationName)
                ) && 
                (
                    this.ApplicationPackage == other.ApplicationPackage ||
                    this.ApplicationPackage != null &&
                    this.ApplicationPackage.Equals(other.ApplicationPackage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ApplicationName != null)
                    hash = hash * 59 + this.ApplicationName.GetHashCode();
                if (this.ApplicationPackage != null)
                    hash = hash * 59 + this.ApplicationPackage.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
