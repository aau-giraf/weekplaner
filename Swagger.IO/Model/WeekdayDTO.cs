/* 
 * My API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Defines the structure of Weekday when serializing and deserializing data. Data transfer objects (DTOs)   were introduced in the project due to problems with circular references in the model classes.
    /// </summary>
    [DataContract]
    public partial class WeekdayDTO :  IEquatable<WeekdayDTO>, IValidatableObject
    {
        /// <summary>
        /// An enum defining which day of the week this Weekday represents.
        /// </summary>
        /// <value>An enum defining which day of the week this Weekday represents.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DayEnum
        {
            
            /// <summary>
            /// Enum Monday for "Monday"
            /// </summary>
            [EnumMember(Value = "Monday")]
            Monday,
            
            /// <summary>
            /// Enum Tuesday for "Tuesday"
            /// </summary>
            [EnumMember(Value = "Tuesday")]
            Tuesday,
            
            /// <summary>
            /// Enum Wednesday for "Wednesday"
            /// </summary>
            [EnumMember(Value = "Wednesday")]
            Wednesday,
            
            /// <summary>
            /// Enum Thursday for "Thursday"
            /// </summary>
            [EnumMember(Value = "Thursday")]
            Thursday,
            
            /// <summary>
            /// Enum Friday for "Friday"
            /// </summary>
            [EnumMember(Value = "Friday")]
            Friday,
            
            /// <summary>
            /// Enum Saturday for "Saturday"
            /// </summary>
            [EnumMember(Value = "Saturday")]
            Saturday,
            
            /// <summary>
            /// Enum Sunday for "Sunday"
            /// </summary>
            [EnumMember(Value = "Sunday")]
            Sunday
        }

        /// <summary>
        /// An enum defining which day of the week this Weekday represents.
        /// </summary>
        /// <value>An enum defining which day of the week this Weekday represents.</value>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public DayEnum? Day { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WeekdayDTO" /> class.
        /// </summary>
        /// <param name="ElementsSet">Defines whether elements has been added to the weekday or not..</param>
        /// <param name="ElementIDs">A list of all id&#39;s of the resources that make up the weekday..</param>
        /// <param name="Day">An enum defining which day of the week this Weekday represents..</param>
        /// <param name="Elements">A list of all the elements of the week..</param>
        public WeekdayDTO(bool? ElementsSet = default(bool?), List<long?> ElementIDs = default(List<long?>), DayEnum? Day = default(DayEnum?), List<ResourceDTO> Elements = default(List<ResourceDTO>))
        {
            this.ElementsSet = ElementsSet;
            this.ElementIDs = ElementIDs;
            this.Day = Day;
            this.Elements = Elements;
        }
        
        /// <summary>
        /// Defines whether elements has been added to the weekday or not.
        /// </summary>
        /// <value>Defines whether elements has been added to the weekday or not.</value>
        [DataMember(Name="elementsSet", EmitDefaultValue=false)]
        public bool? ElementsSet { get; set; }

        /// <summary>
        /// A list of all id&#39;s of the resources that make up the weekday.
        /// </summary>
        /// <value>A list of all id&#39;s of the resources that make up the weekday.</value>
        [DataMember(Name="elementIDs", EmitDefaultValue=false)]
        public List<long?> ElementIDs { get; set; }


        /// <summary>
        /// A list of all the elements of the week.
        /// </summary>
        /// <value>A list of all the elements of the week.</value>
        [DataMember(Name="elements", EmitDefaultValue=false)]
        public List<ResourceDTO> Elements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WeekdayDTO {\n");
            sb.Append("  ElementsSet: ").Append(ElementsSet).Append("\n");
            sb.Append("  ElementIDs: ").Append(ElementIDs).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Elements: ").Append(Elements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WeekdayDTO);
        }

        /// <summary>
        /// Returns true if WeekdayDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of WeekdayDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WeekdayDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ElementsSet == other.ElementsSet ||
                    this.ElementsSet != null &&
                    this.ElementsSet.Equals(other.ElementsSet)
                ) && 
                (
                    this.ElementIDs == other.ElementIDs ||
                    this.ElementIDs != null &&
                    this.ElementIDs.SequenceEqual(other.ElementIDs)
                ) && 
                (
                    this.Day == other.Day ||
                    this.Day != null &&
                    this.Day.Equals(other.Day)
                ) && 
                (
                    this.Elements == other.Elements ||
                    this.Elements != null &&
                    this.Elements.SequenceEqual(other.Elements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ElementsSet != null)
                    hash = hash * 59 + this.ElementsSet.GetHashCode();
                if (this.ElementIDs != null)
                    hash = hash * 59 + this.ElementIDs.GetHashCode();
                if (this.Day != null)
                    hash = hash * 59 + this.Day.GetHashCode();
                if (this.Elements != null)
                    hash = hash * 59 + this.Elements.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
