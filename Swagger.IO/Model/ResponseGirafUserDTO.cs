/* 
 * My API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ResponseGirafUserDTO
    /// </summary>
    [DataContract]
    public partial class ResponseGirafUserDTO :  IEquatable<ResponseGirafUserDTO>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ErrorKey
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorKeyEnum
        {
            
            /// <summary>
            /// Enum Error for "Error"
            /// </summary>
            [EnumMember(Value = "Error")]
            Error,
            
            /// <summary>
            /// Enum FormatError for "FormatError"
            /// </summary>
            [EnumMember(Value = "FormatError")]
            FormatError,
            
            /// <summary>
            /// Enum NoError for "NoError"
            /// </summary>
            [EnumMember(Value = "NoError")]
            NoError,
            
            /// <summary>
            /// Enum NotAuthorized for "NotAuthorized"
            /// </summary>
            [EnumMember(Value = "NotAuthorized")]
            NotAuthorized,
            
            /// <summary>
            /// Enum NotFound for "NotFound"
            /// </summary>
            [EnumMember(Value = "NotFound")]
            NotFound,
            
            /// <summary>
            /// Enum ApplicationNotFound for "ApplicationNotFound"
            /// </summary>
            [EnumMember(Value = "ApplicationNotFound")]
            ApplicationNotFound,
            
            /// <summary>
            /// Enum ChoiceContainsInvalidPictogramId for "ChoiceContainsInvalidPictogramId"
            /// </summary>
            [EnumMember(Value = "ChoiceContainsInvalidPictogramId")]
            ChoiceContainsInvalidPictogramId,
            
            /// <summary>
            /// Enum CitizinAlreadyHasGuardian for "CitizinAlreadyHasGuardian"
            /// </summary>
            [EnumMember(Value = "CitizinAlreadyHasGuardian")]
            CitizinAlreadyHasGuardian,
            
            /// <summary>
            /// Enum CitizinNotFound for "CitizinNotFound"
            /// </summary>
            [EnumMember(Value = "CitizinNotFound")]
            CitizinNotFound,
            
            /// <summary>
            /// Enum DepartmentAlreadyOwnsResource for "DepartmentAlreadyOwnsResource"
            /// </summary>
            [EnumMember(Value = "DepartmentAlreadyOwnsResource")]
            DepartmentAlreadyOwnsResource,
            
            /// <summary>
            /// Enum DepartmentNotFound for "DepartmentNotFound"
            /// </summary>
            [EnumMember(Value = "DepartmentNotFound")]
            DepartmentNotFound,
            
            /// <summary>
            /// Enum EmailServiceUnavailable for "EmailServiceUnavailable"
            /// </summary>
            [EnumMember(Value = "EmailServiceUnavailable")]
            EmailServiceUnavailable,
            
            /// <summary>
            /// Enum ImageAlreadyExistOnPictogram for "ImageAlreadyExistOnPictogram"
            /// </summary>
            [EnumMember(Value = "ImageAlreadyExistOnPictogram")]
            ImageAlreadyExistOnPictogram,
            
            /// <summary>
            /// Enum ImageNotContainedInRequest for "ImageNotContainedInRequest"
            /// </summary>
            [EnumMember(Value = "ImageNotContainedInRequest")]
            ImageNotContainedInRequest,
            
            /// <summary>
            /// Enum InvalidCredentials for "InvalidCredentials"
            /// </summary>
            [EnumMember(Value = "InvalidCredentials")]
            InvalidCredentials,
            
            /// <summary>
            /// Enum InvalidModelState for "InvalidModelState"
            /// </summary>
            [EnumMember(Value = "InvalidModelState")]
            InvalidModelState,
            
            /// <summary>
            /// Enum InvalidProperties for "InvalidProperties"
            /// </summary>
            [EnumMember(Value = "InvalidProperties")]
            InvalidProperties,
            
            /// <summary>
            /// Enum MissingProperties for "MissingProperties"
            /// </summary>
            [EnumMember(Value = "MissingProperties")]
            MissingProperties,
            
            /// <summary>
            /// Enum NoWeekScheduleFound for "NoWeekScheduleFound"
            /// </summary>
            [EnumMember(Value = "NoWeekScheduleFound")]
            NoWeekScheduleFound,
            
            /// <summary>
            /// Enum PasswordNotUpdated for "PasswordNotUpdated"
            /// </summary>
            [EnumMember(Value = "PasswordNotUpdated")]
            PasswordNotUpdated,
            
            /// <summary>
            /// Enum PictogramHasNoImage for "PictogramHasNoImage"
            /// </summary>
            [EnumMember(Value = "PictogramHasNoImage")]
            PictogramHasNoImage,
            
            /// <summary>
            /// Enum PictogramNotFound for "PictogramNotFound"
            /// </summary>
            [EnumMember(Value = "PictogramNotFound")]
            PictogramNotFound,
            
            /// <summary>
            /// Enum QueryFailed for "QueryFailed"
            /// </summary>
            [EnumMember(Value = "QueryFailed")]
            QueryFailed,
            
            /// <summary>
            /// Enum ResourceMustBePrivate for "ResourceMustBePrivate"
            /// </summary>
            [EnumMember(Value = "ResourceMustBePrivate")]
            ResourceMustBePrivate,
            
            /// <summary>
            /// Enum ResourceNotFound for "ResourceNotFound"
            /// </summary>
            [EnumMember(Value = "ResourceNotFound")]
            ResourceNotFound,
            
            /// <summary>
            /// Enum ResourceNotOwnedByDepartment for "ResourceNotOwnedByDepartment"
            /// </summary>
            [EnumMember(Value = "ResourceNotOwnedByDepartment")]
            ResourceNotOwnedByDepartment,
            
            /// <summary>
            /// Enum ResourceIDUnreadable for "ResourceIDUnreadable"
            /// </summary>
            [EnumMember(Value = "ResourceIDUnreadable")]
            ResourceIDUnreadable,
            
            /// <summary>
            /// Enum RoleMustBeCitizin for "RoleMustBeCitizin"
            /// </summary>
            [EnumMember(Value = "RoleMustBeCitizin")]
            RoleMustBeCitizin,
            
            /// <summary>
            /// Enum RoleNotFound for "RoleNotFound"
            /// </summary>
            [EnumMember(Value = "RoleNotFound")]
            RoleNotFound,
            
            /// <summary>
            /// Enum ThumbnailDoesNotExist for "ThumbnailDoesNotExist"
            /// </summary>
            [EnumMember(Value = "ThumbnailDoesNotExist")]
            ThumbnailDoesNotExist,
            
            /// <summary>
            /// Enum UserAlreadyExists for "UserAlreadyExists"
            /// </summary>
            [EnumMember(Value = "UserAlreadyExists")]
            UserAlreadyExists,
            
            /// <summary>
            /// Enum UserNameAlreadyTakenWithinDepartment for "UserNameAlreadyTakenWithinDepartment"
            /// </summary>
            [EnumMember(Value = "UserNameAlreadyTakenWithinDepartment")]
            UserNameAlreadyTakenWithinDepartment,
            
            /// <summary>
            /// Enum UserAlreadyHasAccess for "UserAlreadyHasAccess"
            /// </summary>
            [EnumMember(Value = "UserAlreadyHasAccess")]
            UserAlreadyHasAccess,
            
            /// <summary>
            /// Enum UserAlreadyHasIconUsePut for "UserAlreadyHasIconUsePut"
            /// </summary>
            [EnumMember(Value = "UserAlreadyHasIconUsePut")]
            UserAlreadyHasIconUsePut,
            
            /// <summary>
            /// Enum UserAlreadyOwnsResource for "UserAlreadyOwnsResource"
            /// </summary>
            [EnumMember(Value = "UserAlreadyOwnsResource")]
            UserAlreadyOwnsResource,
            
            /// <summary>
            /// Enum UserAndCitizinMustBeInSameDepartment for "UserAndCitizinMustBeInSameDepartment"
            /// </summary>
            [EnumMember(Value = "UserAndCitizinMustBeInSameDepartment")]
            UserAndCitizinMustBeInSameDepartment,
            
            /// <summary>
            /// Enum UserCannotBeGuardianOfYourself for "UserCannotBeGuardianOfYourself"
            /// </summary>
            [EnumMember(Value = "UserCannotBeGuardianOfYourself")]
            UserCannotBeGuardianOfYourself,
            
            /// <summary>
            /// Enum UserDoesNotOwnResource for "UserDoesNotOwnResource"
            /// </summary>
            [EnumMember(Value = "UserDoesNotOwnResource")]
            UserDoesNotOwnResource,
            
            /// <summary>
            /// Enum UserHasNoIcon for "UserHasNoIcon"
            /// </summary>
            [EnumMember(Value = "UserHasNoIcon")]
            UserHasNoIcon,
            
            /// <summary>
            /// Enum UserHasNoIconUsePost for "UserHasNoIconUsePost"
            /// </summary>
            [EnumMember(Value = "UserHasNoIconUsePost")]
            UserHasNoIconUsePost,
            
            /// <summary>
            /// Enum UserMustBeGuardian for "UserMustBeGuardian"
            /// </summary>
            [EnumMember(Value = "UserMustBeGuardian")]
            UserMustBeGuardian,
            
            /// <summary>
            /// Enum UserNotFound for "UserNotFound"
            /// </summary>
            [EnumMember(Value = "UserNotFound")]
            UserNotFound,
            
            /// <summary>
            /// Enum WeekScheduleNotFound for "WeekScheduleNotFound"
            /// </summary>
            [EnumMember(Value = "WeekScheduleNotFound")]
            WeekScheduleNotFound,
            
            /// <summary>
            /// Enum Forbidden for "Forbidden"
            /// </summary>
            [EnumMember(Value = "Forbidden")]
            Forbidden,
            
            /// <summary>
            /// Enum PasswordMissMatch for "PasswordMissMatch"
            /// </summary>
            [EnumMember(Value = "PasswordMissMatch")]
            PasswordMissMatch,
            
            /// <summary>
            /// Enum TwoDaysCannotHaveSameDayProperty for "TwoDaysCannotHaveSameDayProperty"
            /// </summary>
            [EnumMember(Value = "TwoDaysCannotHaveSameDayProperty")]
            TwoDaysCannotHaveSameDayProperty
        }

        /// <summary>
        /// Gets or Sets ErrorKey
        /// </summary>
        [DataMember(Name="errorKey", EmitDefaultValue=false)]
        public ErrorKeyEnum? ErrorKey { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseGirafUserDTO" /> class.
        /// </summary>
        /// <param name="Data">Data.</param>
        /// <param name="Success">Success.</param>
        /// <param name="ErrorProperties">ErrorProperties.</param>
        public ResponseGirafUserDTO(GirafUserDTO Data = default(GirafUserDTO), bool? Success = default(bool?), List<string> ErrorProperties = default(List<string>))
        {
            this.Data = Data;
            this.Success = Success;
            this.ErrorProperties = ErrorProperties;
        }
        
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public GirafUserDTO Data { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// Gets or Sets ErrorProperties
        /// </summary>
        [DataMember(Name="errorProperties", EmitDefaultValue=false)]
        public List<string> ErrorProperties { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseGirafUserDTO {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorProperties: ").Append(ErrorProperties).Append("\n");
            sb.Append("  ErrorKey: ").Append(ErrorKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ResponseGirafUserDTO);
        }

        /// <summary>
        /// Returns true if ResponseGirafUserDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ResponseGirafUserDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseGirafUserDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.Equals(other.Data)
                ) && 
                (
                    this.Success == other.Success ||
                    this.Success != null &&
                    this.Success.Equals(other.Success)
                ) && 
                (
                    this.ErrorProperties == other.ErrorProperties ||
                    this.ErrorProperties != null &&
                    this.ErrorProperties.SequenceEqual(other.ErrorProperties)
                ) && 
                (
                    this.ErrorKey == other.ErrorKey ||
                    this.ErrorKey != null &&
                    this.ErrorKey.Equals(other.ErrorKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                if (this.Success != null)
                    hash = hash * 59 + this.Success.GetHashCode();
                if (this.ErrorProperties != null)
                    hash = hash * 59 + this.ErrorProperties.GetHashCode();
                if (this.ErrorKey != null)
                    hash = hash * 59 + this.ErrorKey.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
