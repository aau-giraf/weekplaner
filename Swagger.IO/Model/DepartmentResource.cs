/* 
 * My API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Defines a many-to-many relationship between department and resource.
    /// </summary>
    [DataContract]
    public partial class DepartmentResource :  IEquatable<DepartmentResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DepartmentResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentResource" /> class.
        /// </summary>
        /// <param name="Key">The key of the relationship entity..</param>
        /// <param name="OtherKey">The key of the involved department. (required).</param>
        /// <param name="Other">A reference to the actual department..</param>
        /// <param name="ResourceKey">The key of the involved resource. (required).</param>
        /// <param name="Resource">A reference to the actual resource..</param>
        public DepartmentResource(long? Key = default(long?), long? OtherKey = default(long?), Department Other = default(Department), long? ResourceKey = default(long?), Resource Resource = default(Resource))
        {
            // to ensure "OtherKey" is required (not null)
            if (OtherKey == null)
            {
                throw new InvalidDataException("OtherKey is a required property for DepartmentResource and cannot be null");
            }
            else
            {
                this.OtherKey = OtherKey;
            }
            // to ensure "ResourceKey" is required (not null)
            if (ResourceKey == null)
            {
                throw new InvalidDataException("ResourceKey is a required property for DepartmentResource and cannot be null");
            }
            else
            {
                this.ResourceKey = ResourceKey;
            }
            this.Key = Key;
            this.Other = Other;
            this.Resource = Resource;
        }
        
        /// <summary>
        /// The key of the relationship entity.
        /// </summary>
        /// <value>The key of the relationship entity.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public long? Key { get; set; }

        /// <summary>
        /// The key of the involved department.
        /// </summary>
        /// <value>The key of the involved department.</value>
        [DataMember(Name="otherKey", EmitDefaultValue=false)]
        public long? OtherKey { get; set; }

        /// <summary>
        /// A reference to the actual department.
        /// </summary>
        /// <value>A reference to the actual department.</value>
        [DataMember(Name="other", EmitDefaultValue=false)]
        public Department Other { get; set; }

        /// <summary>
        /// The key of the involved resource.
        /// </summary>
        /// <value>The key of the involved resource.</value>
        [DataMember(Name="resourceKey", EmitDefaultValue=false)]
        public long? ResourceKey { get; set; }

        /// <summary>
        /// A reference to the actual resource.
        /// </summary>
        /// <value>A reference to the actual resource.</value>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public Resource Resource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DepartmentResource {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  OtherKey: ").Append(OtherKey).Append("\n");
            sb.Append("  Other: ").Append(Other).Append("\n");
            sb.Append("  ResourceKey: ").Append(ResourceKey).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DepartmentResource);
        }

        /// <summary>
        /// Returns true if DepartmentResource instances are equal
        /// </summary>
        /// <param name="other">Instance of DepartmentResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepartmentResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.OtherKey == other.OtherKey ||
                    this.OtherKey != null &&
                    this.OtherKey.Equals(other.OtherKey)
                ) && 
                (
                    this.Other == other.Other ||
                    this.Other != null &&
                    this.Other.Equals(other.Other)
                ) && 
                (
                    this.ResourceKey == other.ResourceKey ||
                    this.ResourceKey != null &&
                    this.ResourceKey.Equals(other.ResourceKey)
                ) && 
                (
                    this.Resource == other.Resource ||
                    this.Resource != null &&
                    this.Resource.Equals(other.Resource)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.OtherKey != null)
                    hash = hash * 59 + this.OtherKey.GetHashCode();
                if (this.Other != null)
                    hash = hash * 59 + this.Other.GetHashCode();
                if (this.ResourceKey != null)
                    hash = hash * 59 + this.ResourceKey.GetHashCode();
                if (this.Resource != null)
                    hash = hash * 59 + this.Resource.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
