/* 
 * My API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Defines the structure of Pictogram when serializing and deserializing data. Data transfer objects (DTOs)   were introduced in the project due to problems with circular references in the model classes.
    /// </summary>
    [DataContract]
    public partial class PictogramDTO :  IEquatable<PictogramDTO>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets AccessLevel
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccessLevelEnum
        {
            
            /// <summary>
            /// Enum PUBLIC for "PUBLIC"
            /// </summary>
            [EnumMember(Value = "PUBLIC")]
            PUBLIC,
            
            /// <summary>
            /// Enum PROTECTED for "PROTECTED"
            /// </summary>
            [EnumMember(Value = "PROTECTED")]
            PROTECTED,
            
            /// <summary>
            /// Enum PRIVATE for "PRIVATE"
            /// </summary>
            [EnumMember(Value = "PRIVATE")]
            PRIVATE
        }

        /// <summary>
        /// Gets or Sets AccessLevel
        /// </summary>
        [DataMember(Name="accessLevel", EmitDefaultValue=false)]
        public AccessLevelEnum? AccessLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PictogramDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PictogramDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PictogramDTO" /> class.
        /// </summary>
        /// <param name="AccessLevel">AccessLevel (required).</param>
        /// <param name="Image">An array of bytes containing the pictogram&#39;s image..</param>
        /// <param name="Title">Title (required).</param>
        /// <param name="Id">The id of the resource..</param>
        /// <param name="LastEdit">The last time the resource was edited..</param>
        public PictogramDTO(AccessLevelEnum? AccessLevel = default(AccessLevelEnum?), byte[] Image = default(byte[]), string Title = default(string), long? Id = default(long?), DateTime? LastEdit = default(DateTime?))
        {
            // to ensure "AccessLevel" is required (not null)
            if (AccessLevel == null)
            {
                throw new InvalidDataException("AccessLevel is a required property for PictogramDTO and cannot be null");
            }
            else
            {
                this.AccessLevel = AccessLevel;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for PictogramDTO and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            this.Image = Image;
            this.Id = Id;
            this.LastEdit = LastEdit;
        }
        

        /// <summary>
        /// An array of bytes containing the pictogram&#39;s image.
        /// </summary>
        /// <value>An array of bytes containing the pictogram&#39;s image.</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public byte[] Image { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The id of the resource.
        /// </summary>
        /// <value>The id of the resource.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The last time the resource was edited.
        /// </summary>
        /// <value>The last time the resource was edited.</value>
        [DataMember(Name="lastEdit", EmitDefaultValue=false)]
        public DateTime? LastEdit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PictogramDTO {\n");
            sb.Append("  AccessLevel: ").Append(AccessLevel).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastEdit: ").Append(LastEdit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PictogramDTO);
        }

        /// <summary>
        /// Returns true if PictogramDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of PictogramDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PictogramDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessLevel == other.AccessLevel ||
                    this.AccessLevel != null &&
                    this.AccessLevel.Equals(other.AccessLevel)
                ) && 
                (
                    this.Image == other.Image ||
                    this.Image != null &&
                    this.Image.Equals(other.Image)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.LastEdit == other.LastEdit ||
                    this.LastEdit != null &&
                    this.LastEdit.Equals(other.LastEdit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessLevel != null)
                    hash = hash * 59 + this.AccessLevel.GetHashCode();
                if (this.Image != null)
                    hash = hash * 59 + this.Image.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.LastEdit != null)
                    hash = hash * 59 + this.LastEdit.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
