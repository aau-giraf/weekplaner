/* 
 * My API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A week defines the schedule of some citizen in the course of the week.
    /// </summary>
    [DataContract]
    public partial class Week :  IEquatable<Week>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Week" /> class.
        /// </summary>
        /// <param name="Id">The id of the week..</param>
        /// <param name="Weekdays">A collection of weekdays for each day of the week..</param>
        /// <param name="ThumbnailKey">The key of the weeks Thumbnail..</param>
        /// <param name="Thumbnail">Thumbnail.</param>
        public Week(long? Id = default(long?), List<Weekday> Weekdays = default(List<Weekday>), long? ThumbnailKey = default(long?), Pictogram Thumbnail = default(Pictogram))
        {
            this.Id = Id;
            this.Weekdays = Weekdays;
            this.ThumbnailKey = ThumbnailKey;
            this.Thumbnail = Thumbnail;
        }
        
        /// <summary>
        /// The id of the week.
        /// </summary>
        /// <value>The id of the week.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// A collection of weekdays for each day of the week.
        /// </summary>
        /// <value>A collection of weekdays for each day of the week.</value>
        [DataMember(Name="weekdays", EmitDefaultValue=false)]
        public List<Weekday> Weekdays { get; set; }

        /// <summary>
        /// The key of the weeks Thumbnail.
        /// </summary>
        /// <value>The key of the weeks Thumbnail.</value>
        [DataMember(Name="thumbnailKey", EmitDefaultValue=false)]
        public long? ThumbnailKey { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [DataMember(Name="thumbnail", EmitDefaultValue=false)]
        public Pictogram Thumbnail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Week {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Weekdays: ").Append(Weekdays).Append("\n");
            sb.Append("  ThumbnailKey: ").Append(ThumbnailKey).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Week);
        }

        /// <summary>
        /// Returns true if Week instances are equal
        /// </summary>
        /// <param name="other">Instance of Week to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Week other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Weekdays == other.Weekdays ||
                    this.Weekdays != null &&
                    this.Weekdays.SequenceEqual(other.Weekdays)
                ) && 
                (
                    this.ThumbnailKey == other.ThumbnailKey ||
                    this.ThumbnailKey != null &&
                    this.ThumbnailKey.Equals(other.ThumbnailKey)
                ) && 
                (
                    this.Thumbnail == other.Thumbnail ||
                    this.Thumbnail != null &&
                    this.Thumbnail.Equals(other.Thumbnail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Weekdays != null)
                    hash = hash * 59 + this.Weekdays.GetHashCode();
                if (this.ThumbnailKey != null)
                    hash = hash * 59 + this.ThumbnailKey.GetHashCode();
                if (this.Thumbnail != null)
                    hash = hash * 59 + this.Thumbnail.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
